from fastapi import FastAPI, HTTPException, Depends, Header
from fastapi.middleware.cors import CORSMiddleware
from typing import Dict, Any, List
import secrets
import json

# Initialize FastAPI application
app = FastAPI(
    title="Technical Quiz API",
    description="An API serving technical interview questions across various domains.",
    version="1.0.0"
)

# --- CORS Configuration (Allows frontend access) ---
# Allow all origins for development simplicity
origins = ["*"] 

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"], 
    allow_headers=["*"], 
)
# --- End CORS Configuration ---


# API Keys storage (In a real application, this would be a database)
api_keys: Dict[str, str] = {}
limits = {"easy": 100, "medium": 100, "hard": 50}

# Questions Database (A comprehensive collection of 1000 questions)
# NOTE: Using a standardized dict format for all questions (including Python easy MCQs)
questions_db: Dict[str, Dict[str, Dict[str, Any]]] = {
    "Python": {
        "easy": {
            "type": "MCQ",
            "questions": [
                {"question": "What is the correct file extension for Python files?", "options": [".pt", ".py", ".pyt", ".python"], "answer": ".py"},
                {"question": "Which keyword is used to define a function in Python?", "options": ["func", "def", "function", "define"], "answer": "def"},
                {"question": "How do you insert comments in Python code?", "options": ["// comment", "/* comment */", "# comment", "<!-- comment -->"], "answer": "# comment"},
                {"question": "Which of these is a Python data type?", "options": ["integer", "character", "bytecode", "pointer"], "answer": "integer"},
                {"question": "Which operator is used for exponentiation in Python?", "options": ["^", "**", "%", "//"], "answer": "**"},
                {"question": "How do you create a variable with the numeric value 5?", "options": ["x = 5", "x := 5", "int x = 5", "x == 5"], "answer": "x = 5"},
                {"question": "What is the output of print(type(5))?", "options": ["<class 'int'>", "<type 'int'>", "<int>", "int"], "answer": "<class 'int'>"},
                {"question": "Which symbol is used for floor division in Python?", "options": ["/", "//", "%", "**"], "answer": "//"},
                {"question": "How do you create a list in Python?", "options": ["list = {}", "list = []", "list = ()", "list = <>"], "answer": "list = []"},
                {"question": "How do you get the length of a list a?", "options": ["len(a)", "a.length()", "length(a)", "size(a)"], "answer": "len(a)"},
                {"question": "Which of the following is a mutable data type?", "options": ["tuple", "string", "list", "int"], "answer": "list"},
                {"question": "Which keyword is used to create a class in Python?", "options": ["class", "Class", "struct", "object"], "answer": "class"},
                {"question": "What will print('Hello'[1]) output?", "options": ["H", "e", "l", "o"], "answer": "e"},
                {"question": "Which of the following is used to handle exceptions in Python?", "options": ["try-except", "do-catch", "error-handling", "catch"], "answer": "try-except"},
                {"question": "How do you start a Python program?", "options": ["#start", "python main.py", "run python", "execute python"], "answer": "python main.py"},
                {"question": "Which keyword is used to end a loop prematurely?", "options": ["stop", "break", "continue", "exit"], "answer": "break"},
                {"question": "Which of these is a Python tuple?", "options": ["[1,2,3]", "{1,2,3}", "(1,2,3)", "<1,2,3>"], "answer": "(1,2,3)"},
                {"question": "What does // do in Python?", "options": ["Exponentiation", "Division", "Floor division", "Modulus"], "answer": "Floor division"},
                {"question": "How do you start a Python interactive shell?", "options": ["python", "python3 main.py", "py start", "py shell"], "answer": "python"},
                {"question": "Which function is used to display output in Python?", "options": ["output()", "echo()", "print()", "display()"], "answer": "print()"},
            ] * 5 # Multiplying to reach the intended 100 questions (5x20)
        },
        "medium": {
            "type": "Descriptive",
            "questions": [
                {"question": "Explain the difference between deep copy and shallow copy.", "answer": "A shallow copy creates a new object but references the original nested objects. A deep copy creates a new object along with copies of all nested objects. Example: copy.copy() vs copy.deepcopy()."},
                {"question": "What are Python’s mutable and immutable data types?", "answer": "Mutable: list, dict, set, bytearray. Immutable: int, float, bool, str, tuple, frozenset."},
                {"question": "Explain Python’s dynamic typing.", "answer": "Python variables don’t need explicit type declaration. The type is determined at runtime and can change. Example: x=5 → x='Hello' is valid."},
                {"question": "What is typecasting in Python? Give an example.", "answer": "Typecasting converts one data type to another. Example: int('10') converts string '10' to integer 10."},
                {"question": "Difference between == and is.", "answer": "== checks value equality, is checks object identity. Example: a=1000; b=1000; a==b True, a is b False."},
                {"question": "What are Python literals?", "answer": "Literals are fixed values like numbers, strings, booleans, e.g., 100, 3.14, 'Hello', True."},
                {"question": "How is Python memory managed?", "answer": "Python uses automatic garbage collection and reference counting to manage memory."},
                {"question": "Explain Python’s built-in data types.", "answer": "Numeric (int, float, complex), Sequence (list, tuple, range, str), Mapping (dict), Set (set, frozenset), Boolean, NoneType."},
                {"question": "What is the difference between list and tuple?", "answer": "List is mutable, tuple is immutable. Lists use [], tuples use ()."},
                {"question": "Explain Python string slicing.", "answer": "Access substring using [start:stop:step]. Example: 'Python'[1:4] → 'yth'."},
                {"question": "Explain for loop with else in Python.", "answer": "else runs if the loop completes normally without break. Example:\nfor i in range(3):\n    print(i)\nelse:\n    print('Done')"},
                {"question": "What is the difference between break, continue, and pass?", "answer": "break exits loop, continue skips current iteration, pass does nothing (placeholder)."},
                {"question": "Explain Python’s range() function.", "answer": "Generates a sequence of numbers. Syntax: range(start, stop, step). Example: range(1,10,2) → 1,3,5,7,9."},
                {"question": "Difference between while and for loops.", "answer": "for is used for definite iterations, while is for indefinite (condition-based) iterations."},
                {"question": "How can you swap two variables without a temporary variable?", "answer": "Using tuple unpacking: a, b = b, a."},
                {"question": "Explain nested loops in Python.", "answer": "Loops inside loops. Example:\nfor i in range(2):\n    for j in range(2):\n        print(i,j)"},
                {"question": "What are Python’s logical operators?", "answer": "and, or, not used for boolean operations."},
                {"question": "How do you handle multiple conditions?", "answer": "Using if-elif-else structure. Example:\nif x>0: print('Positive')\nelif x<0: print('Negative')\nelse: print('Zero')"},
                {"question": "Explain short-circuit evaluation in Python.", "answer": "In and/or expressions, evaluation stops as soon as result is determined. Example: False and func() → func() not called."},
                {"question": "How does pass differ from None?", "answer": "pass is a placeholder statement, None is a data type representing no value."},
                {"question": "Explain default, keyword, and variable-length arguments.", "answer": "Default: def f(a=5)\nKeyword: f(a=10)\nVariable-length: def f(*args, **kwargs)"},
                {"question": "What is recursion?", "answer": "Function calling itself until a base condition is met. Example: factorial function."},
                {"question": "Difference between global and nonlocal.", "answer": "global accesses global variable, nonlocal accesses variable from enclosing function."},
                {"question": "Explain Python’s first-class functions.", "answer": "Functions can be assigned to variables, passed as arguments, and returned from other functions."},
                {"question": "What is a lambda function?", "answer": "Anonymous, single-line function. Example: f = lambda x: x*2."},
                {"question": "Difference between @staticmethod and @classmethod.", "answer": "staticmethod doesn’t take instance/class, classmethod takes class as first argument."},
                {"question": "Explain inheritance in Python.", "answer": "Mechanism to derive a new class from an existing class (base → derived). Example:\nclass Parent: pass\nclass Child(Parent): pass"},
                {"question": "Difference between multiple inheritance and multilevel inheritance.", "answer": "Multiple: class inherits from multiple classes. Multilevel: class inherits from a class which itself inherits another."},
                {"question": "Explain encapsulation in Python.", "answer": "Restrict access to class data using private attributes (_var or __var) and getters/setters."},
                {"question": "Explain polymorphism in Python.", "answer": "Ability to perform same operation differently. Example: + for int addition and string concatenation."},
                {"question": "Difference between instance variable and class variable.", "answer": "Instance variable: unique per object. Class variable: shared among all objects."},
                {"question": "What is the difference between __str__ and __repr__?", "answer": "__str__ → readable string, __repr__ → unambiguous developer-friendly representation."},
                {"question": "Explain operator overloading in Python.", "answer": "Redefining standard operators for custom objects. Example: defining __add__ in a class."},
                {"question": "Difference between composition and aggregation.", "answer": "Composition: whole controls lifecycle of part. Aggregation: part can exist independently."},
                {"question": "How do you implement method overriding?", "answer": "Derived class defines a method with the same name as base class."},
                {"question": "Difference between list, tuple, and set.", "answer": "List: mutable, ordered, duplicates allowed. Tuple: immutable, ordered. Set: mutable, unordered, no duplicates."},
                {"question": "How to remove duplicates from a list?", "answer": "Convert to set: list(set(a)) or use dictionary keys."},
                {"question": "Difference between deep copy and shallow copy for lists.", "answer": "Shallow copy copies reference, deep copy copies entire nested objects."},
                {"question": "How do you iterate over dictionary keys and values?", "answer": "Using .items():\nfor k,v in d.items(): print(k,v)"},
                {"question": "Explain stack and queue using Python lists.", "answer": "Stack: append() + pop() (LIFO). Queue: append() + pop(0) (FIFO) or use deque for efficiency."},
                {"question": "How to read a file line by line?", "answer": "with open('file.txt') as f:\n    for line in f:\n        print(line.strip())"},
                {"question": "Difference between read(), readline(), readlines().", "answer": "read() → entire content, readline() → next line, readlines() → list of all lines."},
                {"question": "How to write to a file?", "answer": "with open('file.txt','w') as f:\n    f.write('Hello')"},
                {"question": "How to append to a file?", "answer": "Use mode 'a': open('file.txt','a')."},
                {"question": "Explain os and sys modules.", "answer": "os → file system operations, environment variables. sys → Python runtime environment, command-line arguments."},
                {"question": "How to handle exceptions for file operations?", "answer": "Using try-except block:\ntry: f=open('file.txt')\nexcept FileNotFoundError: print('File not found')"},
                {"question": "Difference between import module and from module import func.", "answer": "import module → need module.func(). from module import func → can call func() directly."},
                {"question": "Explain Python’s pickle module.", "answer": "Used for serializing (saving) and deserializing (loading) Python objects."},
                {"question": "How to list all files in a directory?", "answer": "Using os.listdir(path)."},
                {"question": "Difference between absolute and relative imports.", "answer": "Absolute: full path from project root. Relative: using . or .. for current or parent directories."}
            ]
        },
        "hard": {
            "type": "Descriptive",
            "questions": [
                {"question": "Explain Python’s memory management and garbage collection mechanism.", "answer": "Python uses reference counting and a cyclic garbage collector. Reference counting tracks the number of references to objects; when it reaches zero, memory is freed. The cyclic GC detects and collects objects involved in reference cycles."},
                {"question": "Explain the difference between mutable and immutable objects in Python memory context.", "answer": "Mutable objects (list, dict, set) can change their content in-place; immutable objects (int, str, tuple) create new objects on modification. Immutables are stored in shared memory for small integers/strings (interning)."},
                {"question": "How is Python’s list implemented internally?", "answer": "Python lists are dynamic arrays storing references to objects. On exceeding capacity, the array is resized (usually 1.125× current size)."},
                {"question": "Explain the difference between deepcopy and shallow copy with a nested list example.", "answer": "Shallow copy copies outer list only; inner objects are referenced. Deepcopy copies outer and inner objects completely.\n\nimport copy\na=[[1,2],[3,4]]\nb=copy.copy(a)       # shallow\nc=copy.deepcopy(a)  # deep"},
                {"question": "Explain Python’s tuple packing and unpacking.", "answer": "Packing: t=(1,2,3) combines values into a tuple.\nUnpacking: a,b,c=t assigns tuple elements to variables."},
                {"question": "Explain the difference between list, deque, and linked list.", "answer": "List: dynamic array, O(1) access, O(n) insert/delete at start.\nDeque: double-ended queue, O(1) insert/delete at both ends.\nLinked list: not built-in, but O(1) insert/delete anywhere with pointer."},
                {"question": "Explain frozenset and its use cases.", "answer": "Immutable set, hashable, can be used as dict keys. Useful for constant sets and caching."},
                {"question": "How does Python implement dictionaries internally?", "answer": "Using hash tables; keys are hashed to determine index. Python 3.6+ maintains insertion order."},
                {"question": "Explain Python’s set operations and their time complexity.", "answer": "Union (|), Intersection (&), Difference (-) – average O(1) per element due to hash table lookup."},
                {"question": "Difference between is and == in Python with memory perspective.", "answer": "is checks object identity (same memory), == checks value equality. Immutable small objects may share memory (interning)."},
                {"question": "Explain Python decorators with an example.", "answer": "Functions that modify behavior of other functions.\n\ndef deco(f):\n    def wrapper(): print('Before'); f(); print('After')\n    return wrapper\n@deco\ndef say(): print('Hello')\nsay()"},
                {"question": "Difference between @staticmethod and @classmethod.", "answer": "staticmethod doesn’t take instance/class, classmethod takes class as first argument."},
                {"question": "Explain Python’s multiple inheritance and MRO (Method Resolution Order).", "answer": "MRO determines order in which base classes are searched. Python uses C3 linearization."},
                {"question": "Explain operator overloading with an example.", "answer": "Redefining standard operators for custom objects. Example:\nclass A:\n    def __add__(self, other): return 'Sum'"},
                {"question": "Difference between composition and aggregation.", "answer": "Composition: whole owns part (lifecycle bound).\nAggregation: part can exist independently."},
                {"question": "Explain __new__ vs __init__.", "answer": "__new__ creates instance (constructor), __init__ initializes it."},
                {"question": "How does Python implement private and protected members?", "answer": "_var → protected (convention).\n__var → name mangling (_Class__var) for pseudo-private."},
                {"question": "Explain metaclasses in Python.", "answer": "Classes of classes; define behavior of class creation. Used for class customization, e.g., ORM frameworks."},
                {"question": "Explain polymorphism in Python.", "answer": "Same interface, different behavior. Achieved via method overriding or duck typing."},
                {"question": "Explain the concept of duck typing.", "answer": "If an object behaves like a type (supports required methods), it can be used as that type, regardless of class."},
                {"question": "Explain closures in Python.", "answer": "Inner function capturing variables from enclosing scope.\n\ndef outer(x):\n    def inner(y): return x+y\n    return inner\nf=outer(5)\nf(3) # 8"},
                {"question": "Difference between generator and iterator.", "answer": "Iterator implements __iter__ and __next__.\nGenerator is a lazy iterator created using yield."},
                {"question": "Explain yield vs return.", "answer": "return exits function with value. yield pauses function and returns generator item, resuming later."},
                {"question": "Explain Python’s functools.lru_cache.", "answer": "Decorator to cache function results for performance optimization."},
                {"question": "How does *args and **kwargs work internally?", "answer": "*args packs positional arguments as tuple; **kwargs packs keyword arguments as dict."},
                {"question": "Explain function annotations.", "answer": "Optional metadata for parameters and return values. Example:\n\ndef add(a:int, b:int) -> int: return a+b"},
                {"question": "Explain Python’s import system and sys.path.", "answer": "Python searches modules in directories listed in sys.path. Can import packages using relative or absolute paths."},
                {"question": "Difference between absolute and relative imports.", "answer": "Absolute: full package path. Relative: using . or .. to refer to current or parent package."},
                {"question": "Explain Python’s __slots__.", "answer": "Restricts dynamic creation of attributes to save memory.\nclass A: __slots__=['x','y']"},
                {"question": "Difference between shallow copy and copy-on-write.", "answer": "Shallow copy copies references; copy-on-write defers copying until modification occurs."},
                {"question": "Explain Python’s list comprehensions and generator expressions.", "answer": "List comprehension: [x*x for x in range(5)] → list.\nGenerator expression: (x*x for x in range(5)) → generator (lazy evaluation)."},
                {"question": "Explain dictionary comprehension with example.", "answer": "{x:x*x for x in range(5)} → {0:0,1:1,2:4,3:9,4:16}"},
                {"question": "How to merge two dictionaries in Python 3.9+.", "answer": "d3 = d1 | d2 or d1.update(d2)"},
                {"question": "Difference between deepcopy and serialization via pickle.", "answer": "deepcopy duplicates objects in memory; pickle converts object to byte stream for storage/transfer."},
                {"question": "Explain Python’s enumerate() function.", "answer": "Returns index and value from iterable.\nfor i,v in enumerate(['a','b']): print(i,v)"},
                {"question": "Explain Python’s zip() function.", "answer": "Combines multiple iterables element-wise into tuples."},
                {"question": "Explain Python’s map(), filter(), and reduce().", "answer": "map(func,iterable) → apply function.\nfilter(func,iterable) → selects elements.\nreduce(func,iterable) → cumulative operation (from functools)."},
                {"question": "Difference between isinstance() and issubclass().", "answer": "isinstance(obj,Class) → check object type.\nissubclass(Sub,Base) → check class inheritance."},
                {"question": "How to sort a list of dictionaries by key?", "answer": "sorted(lst,key=lambda x: x['key'])"},
                {"question": "Explain Python’s Counter from collections.", "answer": "Counts occurrences of items in iterable. Provides most_common(), elements(). Example:\nfrom collections import Counter\nCounter(['a','b','a']) # Counter({'a':2,'b':1})"},
                {"question": "Explain Python’s GIL.", "answer": "Global Interpreter Lock allows only one thread to execute Python bytecode at a time; affects CPU-bound multithreading."},
                {"question": "Difference between multithreading and multiprocessing.", "answer": "Threads share memory; processes have separate memory space. Multiprocessing bypasses GIL for CPU-bound tasks."},
                {"question": "How to handle file reading and writing efficiently.", "answer": "Using with open(filename) as f: ensures proper closing and exception safety."},
                {"question": "Difference between text and binary file modes.", "answer": "Text mode (r/w) reads strings; binary mode (rb/wb) reads bytes."},
                {"question": "How to serialize Python objects using pickle.", "answer": "import pickle\npickle.dump(obj, open('file.pkl','wb'))\nobj=pickle.load(open('file.pkl','rb'))"},
                {"question": "Difference between json and pickle.", "answer": "JSON: human-readable, interoperable. Pickle: Python-specific, preserves objects including custom classes."},
                {"question": "Explain context managers and __enter__, __exit__.", "answer": "Allows resource management (with keyword). Example: file handling, DB connections."},
                {"question": "Explain Python’s asyncio and await.", "answer": "For asynchronous programming. async def defines coroutine; await pauses until result is ready without blocking event loop."},
                {"question": "How to profile Python code for performance?", "answer": "Using cProfile module: python -m cProfile script.py or import cProfile."},
                {"question": "Explain Python’s memoryviews.", "answer": "Allows direct access to memory of byte-like objects without copying. Efficient for large binary data."}
            ]
        }
    },
    "Java": {
        "easy": {
            "type": "MCQ",
            "questions": [
                {"question": "Java is a __________ language.", "options": ["Procedural", "Object-Oriented", "Functional", "Machine"], "answer": "Object-Oriented"},
                {"question": "The extension of a Java source file is:", "options": [".js", ".java", ".class", ".jv"], "answer": ".java"},
                {"question": "Which method is the entry point of a Java program?", "options": ["start()", "run()", "main()", "init()"], "answer": "main()"},
                {"question": "Which keyword is used to define a class?", "options": ["class", "struct", "object", "define"], "answer": "class"},
                {"question": "Which of the following is a valid identifier in Java?", "options": ["1var", "var_1", "int", "class"], "answer": "var_1"},
                {"question": "Which of these is a primitive data type?", "options": ["String", "int", "ArrayList", "Object"], "answer": "int"},
                {"question": "Which of these is a non-primitive data type?", "options": ["int", "float", "String", "boolean"], "answer": "String"},
                {"question": "How do you declare an integer variable?", "options": ["int x;", "x int;", "integer x;", "var x;"], "answer": "int x;"},
                {"question": "Which keyword is used to create an object?", "options": ["create", "new", "object", "instance"], "answer": "new"},
                {"question": "Which symbol is used for single-line comments?", "options": ["#", "//", "/* */", "<!-- -->"], "answer": "//"},
                {"question": "Which method prints text to the console?", "options": ["echo()", "print()", "System.out.print()", "printf()"], "answer": "System.out.print()"},
                {"question": "Which of these loops executes at least once?", "options": ["for", "while", "do-while", "foreach"], "answer": "do-while"},
                {"question": "Which keyword terminates a loop prematurely?", "options": ["exit", "break", "continue", "stop"], "answer": "break"},
                {"question": "What is the default value of an int variable?", "options": ["0", "null", "1", "undefined"], "answer": "0"},
                {"question": "Which keyword is used to prevent subclassing?", "options": ["abstract", "final", "static", "private"], "answer": "final"},
                {"question": "What is the output of System.out.println(5 + '5');?", "options": ["10", "55", "5 5", "Error"], "answer": "55"},
                {"question": "Java program must be saved in a file with _______ extension.", "options": [".js", ".java", ".class", ".jav"], "answer": ".java"},
                {"question": "Which of the following is correct for main method?", "options": ["public static void main(String args[])", "public static int main(String args[])", "public void main(String args[])", "static public main(String args[])"], "answer": "public static void main(String args[])"},
                {"question": "Which keyword is used to define an interface?", "options": ["class", "interface", "abstract", "implements"], "answer": "interface"},
                {"question": "Which keyword is used for inheritance?", "options": ["extends", "implements", "super", "this"], "answer": "extends"},
                {"question": "Which operator is used for addition?", "options": ["+", "&", "*", "++"], "answer": "+"},
                {"question": "Which operator is used for modulus?", "options": ["%", "/", "*", "//"], "answer": "%"},
                {"question": "++i means:", "options": ["Increment after use", "Increment before use", "Decrement before use", "Decrement after use"], "answer": "Increment before use"},
                {"question": "i-- means:", "options": ["Increment", "Decrement after use", "Decrement before use", "No change"], "answer": "Decrement after use"},
                {"question": "Which operator is used for logical AND?", "options": ["&", "&&", "|", "||"], "answer": "&&"},
                {"question": "Which operator is used for logical OR?", "options": ["|", "||", "&", "&&"], "answer": "||"},
                {"question": "Which operator is used for logical NOT?", "options": ["~", "!", "^", "!="], "answer": "!"},
                {"question": "What is the output of 10 / 3 (int)?", "options": ["3", "3.33", "4", "0"], "answer": "3"},
                {"question": "Which operator is used for assignment?", "options": ["=", "==", ":=", "=>"], "answer": "="},
                {"question": "Output of System.out.println(2 + 3 * 4);?", "options": ["20", "14", "24", "10"], "answer": "14"},
                {"question": "Which operator is used for equality comparison?", "options": ["=", "==", "!=", "==="], "answer": "=="},
                {"question": "Which operator checks inequality?", "options": ["!=", "=!", "==", "<>"], "answer": "!="},
                {"question": "Which operator is used for string concatenation?", "options": ["+", "&", "*", "||"], "answer": "+"},
                {"question": "Which of these is a unary operator?", "options": ["++", "+", "-", "*"], "answer": "++"},
                {"question": "Which of these is a ternary operator?", "options": ["?:", "&", "||", "%"], "answer": "?:"},
                {"question": "Which operator is used for bitwise AND?", "options": ["&", "&&", "|", "^"], "answer": "&"},
                {"question": "Which operator is used for bitwise OR?", "options": ["|", "||", "&", "&&"], "answer": "|"},
                {"question": "Which operator is used for bitwise XOR?", "options": ["&", "^", "|", "%"], "answer": "^"},
                {"question": "What is the precedence of * and +?", "options": ["* is higher", "+ is higher", "same", "depends"], "answer": "* is higher"},
                {"question": "What is the result of 5 % 2?", "options": ["1", "2", "0", "5"], "answer": "1"},
                {"question": "Which of these is a feature of OOP?", "options": ["Inheritance", "Polymorphism", "Encapsulation", "All of the above"], "answer": "All of the above"},
                {"question": "What is polymorphism?", "options": ["One function, one behavior", "One function, multiple behaviors", "Many functions, one behavior", "None"], "answer": "One function, multiple behaviors"},
                {"question": "Which keyword refers to the parent class?", "options": ["super", "this", "parent", "base"], "answer": "super"},
                {"question": "Which keyword refers to the current object?", "options": ["this", "super", "self", "current"], "answer": "this"},
                {"question": "Can Java classes support multiple inheritance directly?", "options": ["Yes", "No", "Only abstract", "Only interfaces"], "answer": "No"},
                {"question": "Which keyword declares an abstract class?", "options": ["final", "abstract", "static", "private"], "answer": "abstract"},
                {"question": "Can abstract classes have concrete methods?", "options": ["Yes", "No", "Only static", "Only abstract"], "answer": "Yes"},
                {"question": "Can interfaces have default methods in Java 8+?", "options": ["Yes", "No", "Only static", "Only abstract"], "answer": "Yes"},
                {"question": "Which access modifier allows visibility in same package?", "options": ["private", "default", "protected", "public"], "answer": "default"},
                {"question": "Which keyword prevents inheritance?", "options": ["abstract", "final", "static", "private"], "answer": "final"},
                {"question": "Which of these allows encapsulation?", "options": ["private variables", "public variables", "protected variables", "all"], "answer": "private variables"},
                {"question": "Which keyword implements an interface?", "options": ["extends", "implements", "interface", "super"], "answer": "implements"},
                {"question": "Which of these supports method overloading?", "options": ["Java", "C", "C++", "Python"], "answer": "Java"},
                {"question": "Which keyword is used to refer to immediate parent class constructor?", "options": ["this()", "super()", "parent()", "base()"], "answer": "super()"},
                {"question": "Which of these is correct for a class constructor?", "options": ["public void MyClass()", "public MyClass()", "MyClass() void", "void MyClass()"], "answer": "public MyClass()"},
                {"question": "Which feature allows objects to take many forms?", "options": ["Inheritance", "Encapsulation", "Polymorphism", "Abstraction"], "answer": "Polymorphism"},
                {"question": "Which of these is used to hide data?", "options": ["public", "private", "static", "final"], "answer": "private"},
                {"question": "Which of these can be used to prevent method overriding?", "options": ["abstract", "final", "static", "protected"], "answer": "final"},
                {"question": "Which is not a feature of OOP?", "options": ["Inheritance", "Polymorphism", "Encapsulation", "Compilation"], "answer": "Compilation"},
                {"question": "Which keyword allows method overloading?", "options": ["static", "abstract", "public", "final"], "answer": "public"},
                {"question": "How do you declare an int array of size 5?", "options": ["int arr[5];", "int arr[] = new int[5];", "int arr = new int[5];", "int arr[];"], "answer": "int arr[] = new int[5];"},
                {"question": "How to get array length?", "options": ["arr.length", "arr.size()", "length(arr)", "arr.len"], "answer": "arr.length"},
                {"question": "Which method compares strings for equality?", "options": ["==", "equals()", "compare()", "match()"], "answer": "equals()"},
                {"question": "Which method gets string length?", "options": ["size()", "length()", "len()", "count()"], "answer": "length()"},
                {"question": "Which method converts string to uppercase?", "options": ["upper()", "toUpperCase()", "toUpper()", "capitalize()"], "answer": "toUpperCase()"},
                {"question": "Which method converts string to lowercase?", "options": ["lower()", "toLowerCase()", "toLower()", "decase()"], "answer": "toLowerCase()"},
                {"question": "How to concatenate strings?", "options": ["+", "&", "concat()", "Both a & c"], "answer": "Both a & c"},
                {"question": "How to get a character at index 2?", "options": ["charAt(2)", "get(2)", "index(2)", "char(2)"], "answer": "charAt(2)"},
                {"question": "How to check if string contains substring?", "options": ["contains()", "indexOf()", "substring()", "match()"], "answer": "contains()"},
                {"question": "Which class is immutable in Java?", "options": ["String", "StringBuilder", "Array", "ArrayList"], "answer": "String"},
                {"question": "How to convert string '123' to int?", "options": ["int('123')", "Integer.parseInt('123')", "parseInt('123')", "Integer('123')"], "answer": "Integer.parseInt('123')"},
                {"question": "How to convert int to string?", "options": ["String.valueOf(123)", "toString(123)", "int.toString(123)", "str(123)"], "answer": "String.valueOf(123)"},
                {"question": "How to reverse a string using StringBuilder?", "options": ["sb.reverse()", "sb.revert()", "sb.flip()", "sb.back()"], "answer": "sb.reverse()"},
                {"question": "Which method splits a string?", "options": ["split()", "slice()", "divide()", "separate()"], "answer": "split()"},
                {"question": "Which method trims whitespace?", "options": ["trim()", "strip()", "remove()", "clean()"], "answer": "trim()"},
                {"question": "Which loop is used for definite iteration?", "options": ["for", "while", "do-while", "switch"], "answer": "for"},
                {"question": "Which loop is used for indefinite iteration?", "options": ["for", "while", "do-while", "switch"], "answer": "while"},
                {"question": "Which statement skips current iteration?", "options": ["break", "continue", "pass", "exit"], "answer": "continue"},
                {"question": "Which statement exits loop?", "options": ["break", "continue", "return", "exit"], "answer": "break"},
                {"question": "Which statement executes if no break occurs in loop?", "options": ["else", "finally", "catch", "default"], "answer": "else"},
                {"question": "Which statement checks multiple conditions?", "options": ["if", "if-else", "if-else-if", "switch"], "answer": "if-else-if"},
                {"question": "Which switch case executes by default?", "options": ["default", "else", "catch", "final"], "answer": "default"},
                {"question": "Can switch work with strings in Java 7+?", "options": ["Yes", "No", "Only integers", "Only chars"], "answer": "Yes"},
                {"question": "Which loop can be nested?", "options": ["for", "while", "do-while", "All of the above"], "answer": "All of the above"},
                {"question": "Which loop is used for arrays?", "options": ["for", "enhanced for", "while", "do-while"], "answer": "enhanced for"},
                {"question": "Which class handles exceptions?", "options": ["Exception", "Error", "Throwable", "Runtime"], "answer": "Exception"},
                {"question": "Which block executes regardless of exception?", "options": ["try", "catch", "finally", "throw"], "answer": "finally"},
                {"question": "How to throw exception manually?", "options": ["throw new Exception();", "raise new Exception();", "throw Exception;", "exception();"], "answer": "throw new Exception();"},
                {"question": "Which exception occurs on divide by zero?", "options": ["IOException", "ArithmeticException", "NullPointerException", "RuntimeException"], "answer": "ArithmeticException"},
                {"question": "Which exception occurs for invalid type casting?", "options": ["ClassCastException", "IOException", "NullPointerException", "ArithmeticException"], "answer": "ClassCastException"},
                {"question": "Which exception occurs for null object method call?", "options": ["NullPointerException", "ClassCastException", "ArithmeticException", "IOException"], "answer": "NullPointerException"},
                {"question": "Which keyword is used to define a custom exception?", "options": ["class", "exception", "throw", "extends"], "answer": "class"},
                {"question": "Which keyword catches exception?", "options": ["try", "catch", "finally", "throw"], "answer": "catch"},
                {"question": "Which exception occurs for array index out of bounds?", "options": ["NullPointerException", "ArrayIndexOutOfBoundsException", "IOException", "ArithmeticException"], "answer": "ArrayIndexOutOfBoundsException"},
                {"question": "Can multiple catch blocks be used?", "options": ["Yes", "No", "Only one", "Only two"], "answer": "Yes"},
                {"question": "Which exception occurs for invalid input?", "options": ["IOException", "ClassCastException", "NullPointerException", "RuntimeException"], "answer": "IOException"},
                {"question": "Which keyword ensures resource closure?", "options": ["try-finally", "catch-finally", "throw-finally", "finally-only"], "answer": "try-finally"},
                {"question": "Which exception occurs for file not found?", "options": ["IOException", "FileNotFoundException", "NullPointerException", "RuntimeException"], "answer": "FileNotFoundException"},
                {"question": "Can exceptions be nested in try-catch?", "options": ["Yes", "No", "Only once", "Only two"], "answer": "Yes"},
                {"question": "Which exception occurs for invalid number format?", "options": ["NumberFormatException", "IOException", "NullPointerException", "ArithmeticException"], "answer": "NumberFormatException"}
            ]
        },
        "medium": {
            "type": "Descriptive",
            "questions": [
                {"question": "What is the difference between JDK, JRE, and JVM?", "answer": "JVM (Java Virtual Machine): Executes Java bytecode and provides platform independence.\n\nJRE (Java Runtime Environment): Provides JVM + libraries required to run Java programs.\n\nJDK (Java Development Kit): JRE + development tools (compiler, debugger, etc.) for building Java applications."},
                {"question": "List the main features of Java.", "answer": "Java is:\nObject-Oriented\nPlatform Independent\nSimple\nSecure\nRobust\nMultithreaded\nPortable"},
                {"question": "What is the difference between a class and an object?", "answer": "A class is a blueprint for creating objects. An object is an instance of a class with actual data."},
                {"question": "Explain == and equals() in Java.", "answer": "== compares object references (memory address).\nequals() compares object content (logical equality)."},
                {"question": "Name Java primitive data types.", "answer": "byte, short, int, long, float, double, char, boolean."},
                {"question": "Name Java non-primitive data types.", "answer": "String, Array, Classes, Interfaces, Enums, Collections (ArrayList, HashMap, etc.)"},
                {"question": "Difference between String, StringBuilder, StringBuffer.", "answer": "String – immutable, slower for concatenation.\nStringBuilder – mutable, faster, non-thread-safe.\nStringBuffer – mutable, thread-safe, slower than StringBuilder."},
                {"question": "What are Java packages?", "answer": "Packages are namespaces that group related classes and interfaces. Example: java.util for utility classes."},
                {"question": "What are access modifiers in Java?", "answer": "Define visibility of classes/members:\nprivate: within class\ndefault (no modifier): within package\nprotected: package + subclasses\npublic: everywhere"},
                {"question": "Difference between static and instance variables.", "answer": "Static: Belongs to class, shared by all objects.\nInstance: Belongs to object, unique per object."},
                {"question": "Difference between ++i and i++.", "answer": "++i (pre-increment): Increment first, then use value.\ni++ (post-increment): Use value first, then increment."},
                {"question": "List relational and logical operators.", "answer": "Relational: >, <, >=, <=, ==, !=\nLogical: &&, ||, !"},
                {"question": "Difference between break and continue.", "answer": "break: exits loop immediately.\ncontinue: skips current iteration, continues next."},
                {"question": "Difference between if-else-if and switch.", "answer": "if-else-if: works with boolean expressions.\nswitch: works with discrete values (int, char, String)."},
                {"question": "What is a ternary operator? Example.", "answer": "A shorthand if-else:\nint a = 10, b = 20;\nint max = (a > b) ? a : b;"},
                {"question": "Explain for, while, and do-while loops.", "answer": "for: definite iteration\nwhile: checks condition before loop\ndo-while: executes at least once, checks after loop"},
                {"question": "How is enhanced for loop used?", "answer": "Iterates over arrays/collections:\nint[] arr = {1,2,3};\nfor(int n: arr) System.out.println(n);"},
                {"question": "Explain nested loops with example.", "answer": "Loop inside another loop:\nfor(int i=1;i<=3;i++){\n  for(int j=1;j<=2;j++){\n    System.out.println(i+\" \"+j);\n  }\n}"},
                {"question": "What is short-circuit evaluation?", "answer": "Logical operators && and || stop evaluation if result is already determined."},
                {"question": "How to handle multiple conditions efficiently?", "answer": "Using if-else-if, switch-case, or logical operators."},
                {"question": "Explain four pillars of OOP.", "answer": "Inheritance: Reuse code from parent class.\nPolymorphism: Single interface, multiple behaviors.\nEncapsulation: Hide internal details using access modifiers.\nAbstraction: Hiding implementation, showing only functionality."},
                {"question": "What is inheritance? Example.", "answer": "A class acquires properties of another class:\nclass Animal { void eat(){} }\nclass Dog extends Animal { void bark(){} }"},
                {"question": "Explain polymorphism.", "answer": "Compile-time: Method overloading\nRuntime: Method overriding"},
                {"question": "Method overloading vs overriding.", "answer": "Overloading: same method name, different parameters.\nOverriding: subclass redefines superclass method."},
                {"question": "What is encapsulation?", "answer": "Wrapping data and methods in a class; control access using private variables and getter/setter."},
                {"question": "Explain abstraction.", "answer": "Hiding implementation details using abstract classes or interfaces."},
                {"question": "Abstract class vs interface.", "answer": "Abstract class: can have concrete & abstract methods.\nInterface: only abstract methods (default/static allowed in Java 8+).\nA class can implement multiple interfaces but extend only one class."},
                {"question": "Use of super and this.", "answer": "super: refers to parent class members\nthis: refers to current object members"},
                {"question": "What is dynamic method dispatch?", "answer": "JVM decides which overridden method to call at runtime."},
                {"question": "How does Java handle multiple inheritance?", "answer": "Through interfaces; classes cannot extend multiple classes directly."},
                {"question": "Role of final keyword.", "answer": "Class: cannot be subclassed\nMethod: cannot be overridden\nVariable: cannot change value"},
                {"question": "Explain constructors in Java.", "answer": "Special method to initialize objects; same name as class."},
                {"question": "Default vs parameterized constructor.", "answer": "Default: no parameters\nParameterized: takes arguments to initialize object"},
                {"question": "How does garbage collection work?", "answer": "JVM automatically removes objects with no references to free memory."},
                {"question": "Object cloning in Java.", "answer": "Copying objects using clone(); class must implement Cloneable."},
                {"question": "Declare and initialize an array.", "answer": "int[] arr = {1,2,3};"},
                {"question": "Explain multidimensional arrays.", "answer": "Arrays containing arrays: int[][] arr = {{1,2},{3,4}};"},
                {"question": "How to get array length?", "answer": "arr.length"},
                {"question": "Difference between ArrayList, LinkedList, and arrays.", "answer": "Array: fixed size, fast access\nArrayList: dynamic array, fast access, slower insertion\nLinkedList: dynamic, slow access, fast insertion/deletion"},
                {"question": "How to iterate arrays and ArrayLists?", "answer": "For loop, enhanced for loop, iterator."},
                {"question": "Explain HashMap, HashSet, TreeMap.", "answer": "HashMap: key-value pairs, unordered\nHashSet: unique elements, unordered\nTreeMap: sorted key-value pairs"},
                {"question": "Convert string to integer and vice versa.", "answer": "int n = Integer.parseInt('123');\nString s = String.valueOf(123);"},
                {"question": "String concatenation.", "answer": "Using + operator or concat() method."},
                {"question": "Reverse a string using StringBuilder.", "answer": "StringBuilder sb = new StringBuilder('abc');\nsb.reverse();"},
                {"question": "Difference between String, StringBuilder, StringBuffer.", "answer": "Immutable vs mutable; thread-safe (StringBuffer) vs not (StringBuilder)."},
                {"question": "What is an exception?", "answer": "Runtime error disrupting program flow; checked vs unchecked exceptions."},
                {"question": "How does try-catch-finally work?", "answer": "try: code to monitor\ncatch: handle exceptions\nfinally: executes regardless of exception"},
                {"question": "How to create custom exceptions?", "answer": "Extend Exception class:\nclass MyException extends Exception {}"},
                {"question": "Difference between throw and throws.", "answer": "throw: throw single exception\nthrows: declare exception in method signature"},
                {"question": "Read/write files in Java.", "answer": "FileReader fr = new FileReader('input.txt');\nFileWriter fw = new FileWriter('output.txt');"}
            ]
        },
        "hard": {
            "type": "Descriptive",
            "questions": [
                {"question": "Explain how Java achieves platform independence.", "answer": "Java code is compiled into bytecode, which runs on the JVM. Since JVMs exist for all platforms, the same code runs everywhere."},
                {"question": "Differentiate between JDK, JRE, and JVM.", "answer": "JDK is the development kit, JRE is the runtime environment, and JVM executes bytecode. JDK includes both JRE and JVM."},
                {"question": "What is the difference between checked and unchecked exceptions?", "answer": "Checked exceptions must be handled at compile-time (e.g., IOException). Unchecked exceptions occur at runtime (e.g., NullPointerException)."},
                {"question": "Explain how memory is managed in Java.", "answer": "Java uses heap for objects and stack for local variables. Garbage collector automatically frees unused objects."},
                {"question": "What is the role of the ClassLoader?", "answer": "ClassLoader loads classes into JVM dynamically at runtime, handling delegation (Bootstrap → Extension → Application)."},
                {"question": "Difference between abstract classes and interfaces in Java?", "answer": "Abstract classes can have implemented + abstract methods. Interfaces define only method signatures (until Java 8 allowed defaults)."},
                {"question": "What is the difference between composition and inheritance?", "answer": "Inheritance reuses a base class. Composition combines objects for flexibility, avoiding tight coupling."},
                {"question": "Explain covariant return types in Java.", "answer": "Covariant return allows an overriding method to return a subtype of the return type declared in the parent class."},
                {"question": "What is the difference between this and super?", "answer": "this refers to current class instance. super refers to the parent class and can access parent’s methods/constructors."},
                {"question": "What is a marker interface? Give an example.", "answer": "A marker interface has no methods, used to indicate metadata. Example: Serializable."},
                {"question": "Difference between process and thread?", "answer": "A process is an independent unit of execution with its own memory. A thread is a lightweight execution unit within a process."},
                {"question": "What are daemon threads?", "answer": "Threads running in the background for JVM tasks (like GC). They end when all user threads end."},
                {"question": "Explain the difference between wait() and sleep().", "answer": "sleep() pauses for a fixed time, does not release lock. wait() pauses until notified and releases lock."},
                {"question": "What is the difference between notify() and notifyAll()?", "answer": "notify() wakes one waiting thread, while notifyAll() wakes all threads waiting on the object monitor."},
                {"question": "Explain thread safety in Java.", "answer": "Thread safety means code behaves correctly with multiple threads. Achieved via synchronization, atomic classes, or concurrent collections."},
                {"question": "Difference between HashMap and Hashtable?", "answer": "HashMap is unsynchronized and allows nulls. Hashtable is synchronized and disallows null keys/values."},
                {"question": "What is the difference between HashMap and ConcurrentHashMap?", "answer": "HashMap is not thread-safe. ConcurrentHashMap allows concurrent reads and controlled writes."},
                {"question": "Explain fail-fast vs fail-safe iterators.", "answer": "Fail-fast throws ConcurrentModificationException on structural changes. Fail-safe works on a copy, so no error."},
                {"question": "What are generics in Java?", "answer": "Generics provide type safety at compile-time, avoiding ClassCastException. Example: ArrayList<String>."},
                {"question": "What is type erasure in generics?", "answer": "During compilation, generic type information is removed and replaced with raw types to ensure backward compatibility."},
                {"question": "Explain JIT compiler in Java.", "answer": "Just-In-Time compiler converts bytecode into native machine code at runtime for faster execution."},
                {"question": "What are memory leaks in Java?", "answer": "Memory leaks occur when objects are no longer used but still referenced, preventing GC from reclaiming memory."},
                {"question": "What is class unloading in JVM?", "answer": "JVM unloads classes when their ClassLoader becomes unreachable and no references exist."},
                {"question": "What is the difference between stack memory and heap memory?", "answer": "Stack holds local variables and method calls. Heap stores objects and instance variables."},
                {"question": "Explain PermGen and Metaspace.", "answer": "Before Java 8, class metadata was stored in PermGen. Java 8 replaced it with Metaspace, using native memory."},
                {"question": "What is the difference between streams and collections?", "answer": "Collections store data, streams process data in functional style with operations like map(), filter()."},
                {"question": "Explain functional interfaces with an example.", "answer": "An interface with one abstract method. Example: Runnable or Java 8’s @FunctionalInterface."},
                {"question": "What is the difference between map() and flatMap()?", "answer": "map() transforms each element, flatMap() flattens multiple nested collections into a single stream."},
                {"question": "What is Optional in Java 8?", "answer": "Optional is a container object to avoid null checks, providing methods like isPresent() and orElse()."},
                {"question": "Explain method references in Java 8.", "answer": "Method references are shorthand for lambdas calling existing methods, e.g., System.out::println."},
                {"question": "Difference between shallow copy and deep copy?", "answer": "Shallow copy copies references of objects. Deep copy creates independent copies of all referenced objects."},
                {"question": "What is reflection in Java?", "answer": "Reflection allows runtime inspection of classes, methods, fields using java.lang.reflect package."},
                {"question": "What are annotations in Java?", "answer": "Annotations provide metadata to code, used for compilation and runtime processing."},
                {"question": "Difference between static binding and dynamic binding?", "answer": "Static binding happens at compile-time (method overloading). Dynamic binding happens at runtime (method overriding)."},
                {"question": "What are volatile variables in Java?", "answer": "Volatile variables ensure visibility of changes across threads, preventing caching issues."},
                {"question": "What is serialization in Java?", "answer": "Serialization converts objects into byte streams for storage or transfer."},
                {"question": "What is deserialization in Java?", "answer": "Deserialization reconstructs objects from byte streams."},
                {"question": "What is transient keyword?", "answer": "transient prevents a variable from being serialized."},
                {"question": "What is socket programming in Java?", "answer": "Socket programming allows communication between machines using TCP/IP."},
                {"question": "What is RMI (Remote Method Invocation)?", "answer": "RMI allows invoking methods on remote objects in distributed applications."},
                {"question": "What is Singleton pattern in Java?", "answer": "Singleton ensures only one instance of a class exists, accessed via a global method."},
                {"question": "What is Factory pattern in Java?", "answer": "Factory pattern provides an interface for creating objects without exposing instantiation logic."},
                {"question": "What is the difference between composition and aggregation?", "answer": "Composition implies strong ownership (object cannot exist without owner). Aggregation is weaker (objects can exist independently)."},
                {"question": "What is dependency injection in Java?", "answer": "Dependency injection is a design pattern where an object’s dependencies are provided externally, improving testability."},
                {"question": "What is immutability in Java?", "answer": "Immutable objects cannot change once created. Example: String. Ensures thread-safety."},
                {"question": "What is the difference between Comparable and Comparator?", "answer": "Comparable defines natural ordering inside a class. Comparator defines custom ordering externally."},
                {"question": "What is dynamic proxy in Java?", "answer": "Dynamic proxy creates proxy instances of interfaces at runtime using Proxy class."},
                {"question": "Explain Soft, Weak, and Phantom references.", "answer": "Soft → cleared if memory low, Weak → cleared on GC, Phantom → for cleanup before object removal."},
                {"question": "What is the difference between synchronized method and synchronized block?", "answer": "A synchronized method locks entire method, while a block locks only a section, improving performance."},
                {"question": "What is the difference between equals() and hashCode()?", "answer": "equals() checks logical equality. hashCode() returns integer used in hashing. Both must follow contract."}
            ]
        }
    },
    "C": {
        "easy": {
            "type": "MCQ",
            "questions": [
                {"question": "Who is the father of C language?", "options": ["James Gosling", "Dennis Ritchie", "Bjarne Stroustrup", "Ken Thompson"], "answer": "Dennis Ritchie"},
                {"question": "Which of the following is a valid C identifier?", "options": ["2variable", "_variable", "-variable", "variable@"], "answer": "_variable"},
                {"question": "Which is the correct file extension of a C program?", "options": [".cp", ".cpp", ".c", ".java"], "answer": ".c"},
                {"question": "C language is a ___________ language.", "options": ["Low-level", "High-level", "Middle-level", "Machine-level"], "answer": "Middle-level"},
                {"question": "The default return type of functions in C is:", "options": ["int", "void", "float", "char"], "answer": "int"},
                {"question": "Which of these is not a valid data type in C?", "options": ["int", "bool", "float", "char"], "answer": "bool"},
                {"question": "Size of int in C (32-bit system) is:", "options": ["2 bytes", "4 bytes", "8 bytes", "1 byte"], "answer": "4 bytes"},
                {"question": "Which operator is used to get the address of a variable?", "options": ["*", "&", "%", "#"], "answer": "&"},
                {"question": "The modulo operator (%) is applicable to:", "options": ["int and float", "float only", "int only", "char only"], "answer": "int only"},
                {"question": "Which operator is used for conditional execution?", "options": ["?:", "&&", "||", "=="], "answer": "?:"},
                {"question": "Which loop is guaranteed to execute at least once?", "options": ["for", "while", "do-while", "switch"], "answer": "do-while"},
                {"question": "break statement is used for:", "options": ["Exit from loop/switch", "Skip one iteration", "Return a value", "Exit program"], "answer": "Exit from loop/switch"},
                {"question": "Which keyword is used to skip current loop iteration?", "options": ["break", "continue", "exit", "switch"], "answer": "continue"},
                {"question": "The switch statement works with:", "options": ["float", "int, char", "double", "bool"], "answer": "int, char"},
                {"question": "What is the output of: int x=1; if(x) printf(\"Yes\"); else printf(\"No\");", "options": ["Yes", "No", "Error", "Null"], "answer": "Yes"},
                {"question": "Which keyword is used to define functions in C?", "options": ["def", "func", "function", "None of the above"], "answer": "None of the above"},
                {"question": "Functions in C can return:", "options": ["Only one value", "Multiple values", "Array directly", "None"], "answer": "Only one value"},
                {"question": "What is recursion in C?", "options": ["A function calling itself", "Loop inside a function", "Function without arguments", "Function without return type"], "answer": "A function calling itself"},
                {"question": "Which keyword is used to return from a function?", "options": ["return", "exit", "break", "stop"], "answer": "return"},
                {"question": "Which function is the entry point in a C program?", "options": ["start()", "main()", "init()", "first()"], "answer": "main()"},
                {"question": "Which storage class has the widest scope?", "options": ["auto", "static", "extern", "register"], "answer": "extern"},
                {"question": "Default storage class for local variables is:", "options": ["auto", "register", "static", "extern"], "answer": "auto"},
                {"question": "Static variables are stored in:", "options": ["Stack", "Heap", "Data segment", "Register"], "answer": "Data segment"},
                {"question": "Which storage class is used for faster access?", "options": ["register", "static", "extern", "auto"], "answer": "register"},
                {"question": "What is the default value of global variables?", "options": ["Garbage", "0", "1", "Null"], "answer": "0"},
                {"question": "Which symbol is used for pointer declaration?", "options": ["&", "*", "#", "->"], "answer": "*"},
                {"question": "NULL pointer means:", "options": ["Points to nothing", "Points to garbage", "Points to memory 0", "Both a & c"], "answer": "Both a & c"},
                {"question": "Which operator is used for pointer dereferencing?", "options": ["*", "&", "->", "%"], "answer": "*"},
                {"question": "Which is correct for array and pointer relation?", "options": ["Array name is a constant pointer", "Pointer and array are unrelated", "Arrays are functions", "None"], "answer": "Array name is a constant pointer"},
                {"question": "Dangling pointer means:", "options": ["Points to invalid memory", "Points to null", "Points to stack", "None"], "answer": "Points to invalid memory"},
                {"question": "Arrays in C are:", "options": ["Homogeneous", "Heterogeneous", "Linked lists", "None"], "answer": "Homogeneous"},
                {"question": "Array index starts from:", "options": ["-1", "0", "1", "Depends on compiler"], "answer": "0"},
                {"question": "Size of char str[]=\"Hello\"; is:", "options": ["5", "6", "7", "4"], "answer": "6"},
                {"question": "Which header is used for string functions?", "options": ["stdlib.h", "string.h", "strings.h", "memory.h"], "answer": "string.h"},
                {"question": "Which function is used to compare strings?", "options": ["strcmp()", "strcpy()", "strcat()", "strlen()"], "answer": "strcmp()"},
                {"question": "Which symbol is used for preprocessor directives?", "options": ["$", "#", "%", "&"], "answer": "#"},
                {"question": "Which directive prevents multiple inclusion?", "options": ["#define", "#include", "#ifndef", "#endif"], "answer": "#ifndef"},
                {"question": "#define PI 3.14 is an example of:", "options": ["Constant", "Macro", "Variable", "Function"], "answer": "Macro"},
                {"question": "Which header file is used for printf()?", "options": ["stdlib.h", "string.h", "stdio.h", "conio.h"], "answer": "stdio.h"},
                {"question": "What does #undef do?", "options": ["Redefines macro", "Removes macro definition", "Includes header", "Defines header"], "answer": "Removes macro definition"},
                {"question": "Which function allocates memory dynamically?", "options": ["malloc()", "free()", "new()", "alloc()"], "answer": "malloc()"},
                {"question": "Which function frees dynamically allocated memory?", "options": ["release()", "delete()", "free()", "clear()"], "answer": "free()"},
                {"question": "What does calloc() do?", "options": ["Allocates memory without initialization", "Allocates memory with zero initialization", "Frees memory", "Reallocates memory"], "answer": "Allocates memory with zero initialization"},
                {"question": "realloc() is used for:", "options": ["Increasing/decreasing allocated memory", "Freeing memory", "Allocating new memory", "None"], "answer": "Increasing/decreasing allocated memory"},
                {"question": "Memory leak occurs when:", "options": ["Allocated memory not freed", "Wrong memory access", "Segmentation fault", "None"], "answer": "Allocated memory not freed"},
                {"question": "Which function is used to open a file?", "options": ["fopen()", "fcreate()", "openfile()", "file()"], "answer": "fopen()"},
                {"question": "Default file opening mode in fopen()?", "options": ["r", "w", "a", "rb"], "answer": "r"},
                {"question": "Which function is used to close file?", "options": ["fclose()", "endfile()", "fileclose()", "exit()"], "answer": "fclose()"},
                {"question": "Which function is used to read a character from file?", "options": ["getc()", "fgetc()", "read()", "both a & b"], "answer": "both a & b"},
                {"question": "Which function writes a string to a file?", "options": ["fputs()", "fwrite()", "fprintf()", "all of the above"], "answer": "all of the above"},
                {"question": "Which keyword is used for constants in C?", "options": ["const", "final", "define", "static"], "answer": "const"},
                {"question": "Enum in C is used for:", "options": ["Declaring arrays", "Defining named constants", "Creating functions", "None"], "answer": "Defining named constants"},
                {"question": "Which operator is used in structure pointer access?", "options": [".", "->", "&", "*"], "answer": "->"},
                {"question": "Which is valid structure declaration?", "options": ["struct { int a; };", "struct X { int a; };", "Both a & b", "None"], "answer": "Both a & b"},
                {"question": "Union in C is used for:", "options": ["Storing multiple values at once", "Storing different members in same memory location", "Same as struct", "None"], "answer": "Storing different members in same memory location"},
            ]
        },
        "medium": {
            "type": "Descriptive",
            "questions": [
                {"question": "Explain the difference between #include <file> and #include \"file\".", "answer": "<file>: Searches standard system directories for header files. \"file\": Searches the current directory first, then standard directories."},
                {"question": "What are the basic data types in C and their sizes?", "answer": "int (usually 4 bytes), float (4 bytes), double (8 bytes), char (1 byte), _Bool (1 byte), void (no storage)."},
                {"question": "Difference between printf() and puts().", "answer": "printf() formats and prints strings. puts() prints a string followed by a newline; simpler and faster for plain text."},
                {"question": "Difference between scanf() and gets().", "answer": "scanf() reads formatted input; stops at whitespace. gets() reads a full line until newline; unsafe, can cause buffer overflow."},
                {"question": "Explain the difference between ++i and i++.", "answer": "++i: Pre-increment, increments first, then uses the value. i++: Post-increment, uses the value first, then increments."},
                {"question": "Difference between break and continue.", "answer": "break: exits the loop entirely. continue: skips current iteration, continues next iteration."},
                {"question": "Explain while, do-while, and for loops with examples.", "answer": "while: condition checked first. do-while: executes at least once. for: best for definite iteration. Example: for(int i=0;i<5;i++) printf(\"%d\",i);"},
                {"question": "What is the purpose of sizeof operator?", "answer": "Returns the memory size of a variable or data type in bytes. Example: int x; printf(\"%zu\", sizeof(x));"},
                {"question": "Explain const, volatile, and static keywords.", "answer": "const: value cannot change. volatile: tells compiler variable can be changed unexpectedly. static: retains value across function calls or restricts scope."},
                {"question": "What is a null pointer?", "answer": "A pointer pointing to NULL, i.e., no valid memory address. Used for safety checks."},
                {"question": "Difference between & and * operators.", "answer": "&: address-of operator, *: dereference operator (value at pointer)."},
                {"question": "What are bitwise operators?", "answer": "Operators that manipulate bits: &, |, ^, ~, <<, >>."},
                {"question": "Difference between logical (&&, ||) and bitwise operators.", "answer": "Logical: used in boolean conditions, short-circuit evaluation. Bitwise: operates on bits, no short-circuit."},
                {"question": "How does ternary operator work?", "answer": "Syntax: condition ? expr1 : expr2; Example: int max = (a>b)?a:b;"},
                {"question": "Explain operator precedence with example.", "answer": "Determines order of evaluation: * / % > + -. Example: int x = 2 + 3*4; // x = 14"},
                {"question": "Difference between = and ==.", "answer": "=: assignment, ==: equality comparison."},
                {"question": "What is short-circuit evaluation?", "answer": "Logical expressions stop evaluating once the result is determined: (a != 0 && b/a > 2)"},
                {"question": "How do increment/decrement operators work with expressions?", "answer": "Pre-increment: increment first, then evaluate. Post-increment: evaluate first, then increment."},
                {"question": "What is typecasting?", "answer": "Conversion between data types. Implicit: compiler converts automatically. Explicit: programmer converts manually. Example: int x = (int)3.5;"},
                {"question": "How are arithmetic operations handled for mixed types?", "answer": "Type promotion occurs: smaller type promoted to larger type to avoid data loss."},
                {"question": "Call by value vs call by reference.", "answer": "Call by value: passes a copy of data, changes not reflected. Call by reference: passes address, changes reflected."},
                {"question": "How are functions declared, defined, and called?", "answer": "int sum(int a, int b); // declaration, int sum(int a,int b){ return a+b;} // definition, sum(2,3); // call"},
                {"question": "Explain function pointers.", "answer": "Pointer stores address of a function. Example: int (*fp)(int,int) = sum; int result = fp(2,3);"},
                {"question": "Recursive functions with example.", "answer": "Function calls itself: int factorial(int n){ return n<=1?1:n*factorial(n-1); }"},
                {"question": "Difference between standard and user-defined functions.", "answer": "Standard: built-in (printf, scanf). User-defined: programmer created."},
                {"question": "How to pass an array to a function?", "answer": "Pass array name (pointer) and optionally size: void printArray(int arr[], int n);"},
                {"question": "Explain void functions.", "answer": "Functions that do not return a value."},
                {"question": "What are static functions?", "answer": "Functions accessible only within the file where defined."},
                {"question": "How are command-line arguments used?", "answer": "int main(int argc, char *argv[]) allows passing arguments from terminal."},
                {"question": "Recursive vs iterative functions?", "answer": "Recursive calls itself; iterative uses loops. Recursive can be more readable, iterative often more memory-efficient."},
                {"question": "How are arrays declared and initialized?", "answer": "int arr[5] = {1,2,3,4,5};"},
                {"question": "Single-dimensional vs multi-dimensional arrays.", "answer": "Single-dimensional: int arr[5], Multi-dimensional: int arr[2][3]"},
                {"question": "How are strings represented?", "answer": "Array of characters ending with \\0. Example: char str[10] = \"Hello\";"},
                {"question": "Common string library functions.", "answer": "strcpy, strcat, strlen, strcmp, strrev."},
                {"question": "Find largest element in an array.", "answer": "Iterate through array comparing values with a max variable."},
                {"question": "What are pointers?", "answer": "Variables storing memory addresses."},
                {"question": "Pointer arithmetic.", "answer": "Incrementing/decrementing moves by size of data type. Example: int *p; p++; // moves by sizeof(int)"},
                {"question": "Pass pointers to functions.", "answer": "Allows modifying actual variable. Example: void increment(int *x){ (*x)++; }"},
                {"question": "Difference between NULL, 0, and uninitialized pointer.", "answer": "NULL: points nowhere. 0: same as NULL. Uninitialized: may point anywhere (dangerous)."},
                {"question": "Double pointers.", "answer": "Pointer to a pointer: int **pp; Used in dynamic arrays or pointer of pointers."},
                {"question": "What are structures?", "answer": "Collection of different types under one name. Example: struct Student { char name[20]; int roll; };"},
                {"question": "Difference between struct and union.", "answer": "Struct: each member gets separate memory. Union: all members share same memory."},
                {"question": "Nested structures.", "answer": "Structure within a structure: struct Date { int day, month, year; }; struct Student { char name[20]; struct Date dob; };"},
                {"question": "What is an enum?", "answer": "User-defined type with named constants: enum Color { RED, GREEN, BLUE };"},
                {"question": "Pass structure to function.", "answer": "By value or pointer: void printStudent(struct Student s); void printStudentPtr(struct Student *s);"},
                {"question": "How to open/close files?", "answer": "FILE *fp = fopen(\"file.txt\",\"r\"); fclose(fp);"},
                {"question": "File modes?", "answer": "r (read), w (write), a (append), rb/wb/ab (binary)"},
                {"question": "Reading/writing files.", "answer": "fscanf(fp,\"%d\",&x); fprintf(fp,\"%d\",x); fgets(str, size, fp); fputs(str, fp);"},
                {"question": "Check end-of-file?", "answer": "Using feof(fp); returns non-zero if end reached."},
                {"question": "Error handling with files.", "answer": "Check if file pointer is NULL after fopen. Use perror() or exit() on error."}
            ]
        },
        "hard": {
            "type": "Descriptive",
            "questions": [
                {"question": "What is the difference between malloc() and calloc()?", "answer": "malloc() allocates uninitialized memory, while calloc() allocates zero-initialized memory for multiple blocks."},
                {"question": "What is a memory leak in C?", "answer": "A memory leak occurs when dynamically allocated memory is not freed using free(), causing wasted memory."},
                {"question": "Explain the difference between struct and union.", "answer": "In struct, each member has separate memory, while in union, members share the same memory location."},
                {"question": "What is a dangling pointer?", "answer": "A dangling pointer is a pointer pointing to memory that has been freed or deleted."},
                {"question": "Explain volatile keyword.", "answer": "volatile tells the compiler that a variable can change unexpectedly, preventing optimization on it."},
                {"question": "What are function pointers in C?", "answer": "Function pointers store the address of a function and allow calling functions dynamically."},
                {"question": "What is the difference between stack and heap memory in C?", "answer": "Stack is automatically managed (local variables), while heap requires manual allocation (malloc, free)."},
                {"question": "What is pointer arithmetic?", "answer": "Pointer arithmetic involves operations like increment/decrement, where movement depends on data type size."},
                {"question": "What is the difference between exit() and _exit()?", "answer": "exit() performs cleanup like flushing I/O buffers, while _exit() terminates immediately without cleanup."},
                {"question": "What are wild pointers?", "answer": "Wild pointers are uninitialized pointers that point to unpredictable memory locations."},
                {"question": "What is the difference between gets() and fgets()?", "answer": "gets() is unsafe (no boundary check), while fgets() is safer and limits input size."},
                {"question": "Explain memory alignment in C.", "answer": "Memory alignment ensures data is stored at addresses suitable for efficient CPU access."},
                {"question": "What is the difference between shallow copy and deep copy?", "answer": "Shallow copy copies only values, while deep copy duplicates dynamically allocated memory too."},
                {"question": "What is the use of setjmp() and longjmp()?", "answer": "They enable non-local jumps, useful for error handling by saving and restoring program state."},
                {"question": "Difference between static and dynamic linking.", "answer": "Static linking copies library code into the executable, while dynamic linking refers at runtime."},
                {"question": "What is segmentation fault?", "answer": "It occurs when a program accesses restricted or invalid memory."},
                {"question": "What is inline function in C?", "answer": "Inline suggests the compiler to expand the function code at call site, reducing overhead."},
                {"question": "Explain bit fields in C.", "answer": "Bit fields allow struct members to occupy specific bits instead of full bytes."},
                {"question": "What is the difference between enum and #define constants?", "answer": "enum provides type safety, while #define is a preprocessor replacement."},
                {"question": "What is the purpose of restrict keyword?", "answer": "restrict tells the compiler a pointer is the only way to access the memory it points to."},
                {"question": "Difference between lvalue and rvalue.", "answer": "lvalue refers to memory location (modifiable), while rvalue is a value not stored directly."},
                {"question": "What is the difference between fork() and exec() in C (Unix)?", "answer": "fork() creates a new process, while exec() replaces the current process with a new one."},
                {"question": "What is the difference between memcpy() and strcpy()?", "answer": "memcpy() copies raw memory (binary safe), while strcpy() copies strings until \\0."},
                {"question": "Explain static variable inside a function.", "answer": "It retains its value between function calls, unlike auto variables."},
                {"question": "What is buffer overflow?", "answer": "Buffer overflow occurs when writing beyond allocated memory space, often causing crashes/security risks."},
                {"question": "What is undefined behavior in C?", "answer": "Operations where the C standard gives no predictable outcome (e.g., dividing by zero)."},
                {"question": "Explain difference between actual parameter and formal parameter.", "answer": "Actual parameters are values passed to a function, while formal parameters are function arguments."},
                {"question": "What is the use of assert() in C?", "answer": "It checks assumptions at runtime, aborting the program if the condition fails."},
                {"question": "What is reentrancy in C functions?", "answer": "A reentrant function can be safely called again before its previous execution completes."},
                {"question": "Explain the difference between pre-increment and post-increment.", "answer": "Pre-increment increases value first, then uses it; post-increment uses the value, then increases it."},
                {"question": "What is the difference between size_t and int?", "answer": "size_t is unsigned and portable for memory sizes, while int may be signed and smaller."},
                {"question": "Why is main() function special in C?", "answer": "main() is the entry point of every C program where execution begins."},
                {"question": "What is a segmentation fault caused by null pointer dereference?", "answer": "Accessing memory using a NULL pointer leads to invalid memory access error."},
                {"question": "What is the difference between union and enum?", "answer": "union stores different data types in the same memory, while enum represents named constants."},
                {"question": "What is the purpose of macros with arguments?", "answer": "They allow parameterized preprocessing, acting like inline functions but without type checking."},
                {"question": "What is a command-line argument in C?", "answer": "Inputs passed to main() via argc and argv, allowing runtime parameterization."},
                {"question": "Difference between local and global variable storage.", "answer": "Local variables live on stack and limited to function scope, global variables exist throughout program."},
                {"question": "Explain recursion in C.", "answer": "Recursion is when a function calls itself until a base condition is met."},
                {"question": "What is the difference between compile-time error and runtime error?", "answer": "Compile-time errors are detected by compiler, runtime errors occur while executing."},
                {"question": "What are inline assembly instructions in C?", "answer": "Inline assembly allows embedding assembly code inside C for low-level control."},
                {"question": "Explain static vs dynamic memory allocation.", "answer": "Static allocation is fixed at compile time, while dynamic allocation happens at runtime."},
                {"question": "What is the difference between fopen() modes \"r\" and \"rb\"?", "answer": "\"r\" is for text files, \"rb\" is for binary files."},
                {"question": "What is the role of header files in C?", "answer": "Header files contain declarations of functions, macros, and constants used across files."},
                {"question": "What is pointer to pointer in C?", "answer": "A pointer that stores the address of another pointer variable."},
                {"question": "Explain difference between array and pointer.", "answer": "Arrays have fixed size, pointers can point anywhere and be reassigned."},
                {"question": "What is a segmentation violation with array indexing?", "answer": "Accessing outside array bounds causes invalid memory access."},
                {"question": "What is the difference between compile-time polymorphism and runtime polymorphism in C?", "answer": "C supports compile-time polymorphism via macros and function overloading (with tricks), but not runtime polymorphism like C++."},
                {"question": "Explain self-referential structures.", "answer": "A struct containing a pointer to the same struct type, used in linked lists."},
                {"question": "What is an inline expansion of macros?", "answer": "During preprocessing, macros are replaced directly with their definitions."},
                {"question": "Why is C considered a low-level language compared to others?", "answer": "C provides direct memory access, pointer manipulation, and minimal abstraction closer to machine level."}
            ]
        }
    },
    "C++": {
        "easy": {
            "type": "MCQ",
            "questions": [
                {"question": "Who developed C++?", "options": ["Bjarne Stroustrup", "Dennis Ritchie", "James Gosling", "Ken Thompson"], "answer": "Bjarne Stroustrup"},
                {"question": "C++ was developed as an extension of which language?", "options": ["Java", "Python", "C", "Pascal"], "answer": "C"},
                {"question": "What is the file extension of C++ source files?", "options": [".c", ".cpp", ".java", ".cs"], "answer": ".cpp"},
                {"question": "Which of these is not a C++ data type?", "options": ["int", "float", "string", "real"], "answer": "real"},
                {"question": "The cin object in C++ is used for:", "options": ["Output", "Input", "Compilation", "Linking"], "answer": "Input"},
                {"question": "The cout object in C++ belongs to which header?", "options": ["iostream", "stdio.h", "conio.h", "cstdlib"], "answer": "iostream"},
                {"question": "Which operator is used for scope resolution?", "options": [".", "::", "->", ":"], "answer": "::"},
                {"question": "What is the default return type of main() in C++?", "options": ["void", "int", "float", "char"], "answer": "int"},
                {"question": "Which symbol is used for single-line comments in C++?", "options": ["/*", "//", "#", "*"], "answer": "//"},
                {"question": "Which of these is not a valid identifier in C++?", "options": ["total_marks", "sum1", "1value", "value1"], "answer": "1value"},
                {"question": "Which loop executes at least once?", "options": ["for", "while", "do-while", "switch"], "answer": "do-while"},
                {"question": "Which keyword is used to exit a loop immediately?", "options": ["exit", "break", "continue", "return"], "answer": "break"},
                {"question": "What does the continue statement do?", "options": ["Exits loop", "Skips current iteration", "Stops program", "None"], "answer": "Skips current iteration"},
                {"question": "Which control structure is used for multi-way branching?", "options": ["if", "else-if", "switch", "break"], "answer": "switch"},
                {"question": "What will 5 % 2 return in C++?", "options": ["0", "1", "2", "5"], "answer": "1"},
                {"question": "Which keyword is used to define a function that does not return a value?", "options": ["void", "null", "empty", "none"], "answer": "void"},
                {"question": "Which keyword is used to return a value from a function?", "options": ["yield", "exit", "return", "break"], "answer": "return"},
                {"question": "Functions in C++ are by default:", "options": ["private", "inline", "global", "public"], "answer": "public"},
                {"question": "What is function overloading?", "options": ["Same function name, different parameters", "Different name, same parameters", "Multiple return values", "None"], "answer": "Same function name, different parameters"},
                {"question": "Inline functions are expanded at:", "options": ["Runtime", "Compile time", "Execution time", "Linking time"], "answer": "Compile time"},
                {"question": "Which of these is not an OOP principle?", "options": ["Encapsulation", "Abstraction", "Inheritance", "Compilation"], "answer": "Compilation"},
                {"question": "Encapsulation in C++ means:", "options": ["Wrapping data and methods", "Data hiding only", "Functions without parameters", "Using loops"], "answer": "Wrapping data and methods"},
                {"question": "Which type of inheritance is not supported in C++?", "options": ["Multiple", "Hierarchical", "Multilevel", "None (all are supported)"], "answer": "None (all are supported)"},
                {"question": "A constructor is called when:", "options": ["Object is declared", "Program ends", "Function returns", "Destructor runs"], "answer": "Object is declared"},
                {"question": "A destructor has the same name as the class prefixed with:", "options": ["@", "~", "!", "#"], "answer": "~"},
                {"question": "What is polymorphism in C++?", "options": ["Multiple functions with same name", "Ability of object to take many forms", "Multiple inheritance", "Both a and b"], "answer": "Both a and b"},
                {"question": "Which keyword is used for inheritance?", "options": ["inherits", ":", "::", "->"], "answer": ":"},
                {"question": "Which type of function is used for runtime polymorphism?", "options": ["Inline", "Virtual", "Friend", "Static"], "answer": "Virtual"},
                {"question": "What is pure virtual function?", "options": ["Function with definition", "Function with no body (=0)", "Function returning void", "Inline function"], "answer": "Function with no body (=0)"},
                {"question": "Which keyword prevents class inheritance?", "options": ["const", "private", "final", "sealed"], "answer": "final"},
                {"question": "Which operator is used for dynamic memory allocation?", "options": ["malloc", "new", "alloc", "create"], "answer": "new"},
                {"question": "Which operator frees dynamically allocated memory?", "options": ["delete", "free", "remove", "destroy"], "answer": "delete"},
                {"question": "What happens if delete is used twice on same pointer?", "options": ["Normal behavior", "Dangling pointer / crash", "Memory leaks", "Compiles fine always"], "answer": "Dangling pointer / crash"},
                {"question": "Which operator cannot be overloaded?", "options": ["+", "::", "[]", "()"], "answer": "::"},
                {"question": "What is the default access modifier for class members in C++?", "options": ["public", "private", "protected", "friend"], "answer": "private"},
                {"question": "What are templates in C++?", "options": ["Preprocessor macros", "Generic programming feature", "Compiler directive", "OOP feature"], "answer": "Generic programming feature"},
                {"question": "Which STL container stores elements in key-value pairs?", "options": ["vector", "map", "stack", "queue"], "answer": "map"},
                {"question": "Which STL container allows duplicate keys?", "options": ["set", "map", "multiset", "unordered_map"], "answer": "multiset"},
                {"question": "Which STL container is LIFO?", "options": ["queue", "stack", "vector", "deque"], "answer": "stack"},
                {"question": "Which function adds element at end of vector?", "options": ["add()", "insert()", "push_back()", "append()"], "answer": "push_back()"},
                {"question": "Which keyword is used to throw an exception?", "options": ["raise", "throw", "error", "catch"], "answer": "throw"},
                {"question": "Which block is used to handle exceptions?", "options": ["handle", "catch", "exception", "error"], "answer": "catch"},
                {"question": "Which keyword ensures code execution regardless of exception?", "options": ["finally", "cleanup", "default", "none (C++ doesn’t have finally)"], "answer": "none (C++ doesn’t have finally)"},
                {"question": "What is exception specification in C++11?", "options": ["throw()", "noexcept", "try-catch", "error()"], "answer": "noexcept"},
                {"question": "What is the base class for all exceptions in C++?", "options": ["Exception", "std::exception", "error", "runtime_error"], "answer": "std::exception"},
                {"question": "Which class is used for input file handling?", "options": ["ofstream", "ifstream", "fstream", "iostream"], "answer": "ifstream"},
                {"question": "Which class is used for output file handling?", "options": ["ofstream", "ifstream", "fstream", "iostream"], "answer": "ofstream"},
                {"question": "Which function checks end-of-file condition?", "options": ["eof()", "end()", "check()", "terminate()"], "answer": "eof()"},
                {"question": "Which operator is used for writing into a file?", "options": ["<<", ">>", "=", "->"], "answer": "<<"},
                {"question": "Which operator is used for reading from a file?", "options": ["<<", ">>", "=", "->"], "answer": ">>"},
                {"question": "What is multiple inheritance in C++?", "options": ["Class inherits from multiple classes", "Multiple classes inherit from one class", "Inheriting multiple times from same class", "Not supported"], "answer": "Class inherits from multiple classes"},
                {"question": "Which type of inheritance may cause ambiguity?", "options": ["Multilevel", "Multiple", "Hierarchical", "Hybrid"], "answer": "Multiple"},
                {"question": "What is the diamond problem in C++?", "options": ["Memory allocation issue", "Ambiguity in multiple inheritance", "Template error", "Operator overload conflict"], "answer": "Ambiguity in multiple inheritance"},
                {"question": "Which keyword solves the diamond problem?", "options": ["override", "final", "virtual", "const"], "answer": "virtual"},
                {"question": "Which access specifier makes base members visible to derived class only?", "options": ["public", "private", "protected", "static"], "answer": "protected"},
                {"question": "Which constructor is called automatically when derived object is created?", "options": ["Derived constructor only", "Base constructor first", "Destructor", "None"], "answer": "Base constructor first"},
                {"question": "In C++, virtual functions are resolved at:", "options": ["Compile time", "Run time", "Link time", "None"], "answer": "Run time"},
                {"question": "What is object slicing?", "options": ["Cutting object into parts", "Losing derived part when assigned to base class object", "Deleting an object", "None"], "answer": "Losing derived part when assigned to base class object"},
                {"question": "Which type of function cannot be virtual?", "options": ["Destructor", "Constructor", "Member function", "Inline function"], "answer": "Constructor"},
                {"question": "Which is the correct syntax for pure virtual function?", "options": ["virtual void f() {}", "virtual void f() = 0;", "void f() = virtual;", "pure virtual f()"], "answer": "virtual void f() = 0;"},
                {"question": "Which keyword defines a template?", "options": ["generic", "template", "typename", "class"], "answer": "template"},
                {"question": "Which keyword is used in template parameter list besides class?", "options": ["type", "var", "typename", "id"], "answer": "typename"},
                {"question": "Template functions are instantiated when:", "options": ["Declared", "Called with specific type", "Compiled", "Linked"], "answer": "Called with specific type"},
                {"question": "Which type of polymorphism do templates provide?", "options": ["Runtime", "Compile time", "Hybrid", "None"], "answer": "Compile time"},
                {"question": "Which container is not part of STL?", "options": ["list", "map", "tree", "vector"], "answer": "tree"},
                {"question": "Which STL container maintains sorted unique elements?", "options": ["set", "multiset", "vector", "unordered_set"], "answer": "set"},
                {"question": "Which STL container is implemented as a doubly-linked list?", "options": ["vector", "deque", "list", "stack"], "answer": "list"},
                {"question": "The time complexity of searching in unordered_map is on average:", "options": ["O(1)", "O(n)", "O(log n)", "O(n log n)"], "answer": "O(1)"},
                {"question": "Which adaptor does not allow random access?", "options": ["stack", "queue", "priority_queue", "deque"], "answer": "stack"},
                {"question": "Which function removes all elements from a container?", "options": ["delete()", "clear()", "erase()", "remove()"], "answer": "clear()"},
                {"question": "Which operators cannot be overloaded in C++?", "options": ["+ and -", ":: and .", "[] and ()", "new and delete"], "answer": ":: and ."},
                {"question": "What is the return type of overloaded assignment operator?", "options": ["void", "int", "reference to object", "pointer"], "answer": "reference to object"},
                {"question": "Which operator is used to overload stream insertion?", "options": [">>", "<<", "=", "->"], "answer": "<<"},
                {"question": "Which operator is used to overload stream extraction?", "options": [">>", "<<", "=", "->"], "answer": ">>"},
                {"question": "Which keyword is used to prevent operator overloading outside a class?", "options": ["private", "friend", "protected", "none"], "answer": "friend"},
                {"question": "Overloaded operators must have at least how many operands?", "options": ["0", "1", "2", "depends"], "answer": "1"},
                {"question": "Can we overload the sizeof operator?", "options": ["Yes", "No"], "answer": "No"},
                {"question": "Can we overload the conditional (?:) operator?", "options": ["Yes", "No"], "answer": "No"},
                {"question": "Which operator is overloaded by default in every class?", "options": ["=", "+", "[]", "->"], "answer": "="},
                {"question": "Which operator cannot be a friend function overload?", "options": ["=", "<<", "[]", "+"], "answer": "[]"},
                {"question": "What is RTTI in C++?", "options": ["Run-Time Type Information", "Real-Time Testing Interface", "Random Type Integration", "None"], "answer": "Run-Time Type Information"},
                {"question": "Which operator is used in RTTI for type casting?", "options": ["static_cast", "dynamic_cast", "reinterpret_cast", "const_cast"], "answer": "dynamic_cast"},
                {"question": "Which operator removes constness of a variable?", "options": ["const_cast", "static_cast", "dynamic_cast", "reinterpret_cast"], "answer": "const_cast"},
                {"question": "Which cast is safest at runtime?", "options": ["static_cast", "dynamic_cast", "const_cast", "reinterpret_cast"], "answer": "dynamic_cast"},
                {"question": "Which memory model is used by C++ for exception handling?", "options": ["Stack unwinding", "Heap allocation", "Static model", "None"], "answer": "Stack unwinding"},
                {"question": "What is the default access level for struct members in C++?", "options": ["private", "public", "protected", "global"], "answer": "public"},
                {"question": "What is the difference between shallow copy and deep copy?", "options": ["Shallow: copies references, Deep: copies values and memory", "Shallow: copies values only, Deep: ignores memory", "Both same", "None"], "answer": "Shallow: copies references, Deep: copies values and memory"},
                {"question": "Copy constructor is invoked when:", "options": ["Object is created normally", "Object is passed by value", "Object is returned by value", "Both b and c"], "answer": "Both b and c"},
                {"question": "Which function is called when object goes out of scope?", "options": ["Destructor", "Constructor", "Finalizer", "Cleaner"], "answer": "Destructor"},
                {"question": "Which feature allows writing same function for multiple data types?", "options": ["Operator overloading", "Templates", "Polymorphism", "Inheritance"], "answer": "Templates"},
                {"question": "Which keyword is used to define constant variables?", "options": ["const", "static", "final", "define"], "answer": "const"},
                {"question": "Which function is entry point of every C++ program?", "options": ["start()", "main()", "init()", "program()"], "answer": "main()"},
                {"question": "Which type of variables are shared among all objects of a class?", "options": ["local", "static", "instance", "global"], "answer": "static"},
                {"question": "The this pointer refers to:", "options": ["Current object", "Parent class", "Global scope", "None"], "answer": "Current object"},
                {"question": "Which keyword creates an alias for a type?", "options": ["alias", "typedef", "using", "Both b and c"], "answer": "Both b and c"},
                {"question": "Which loop is best for traversing arrays in C++11?", "options": ["for", "while", "do-while", "range-based for"], "answer": "range-based for"},
                {"question": "Which of these headers defines smart pointers in C++11?", "options": ["memory", "smart", "pointer", "utility"], "answer": "memory"},
                {"question": "Which smart pointer automatically destroys object when out of scope?", "options": ["shared_ptr", "weak_ptr", "unique_ptr", "raw pointer"], "answer": "unique_ptr"},
                {"question": "Which C++ version introduced auto keyword for type inference?", "options": ["C++98", "C++03", "C++11", "C++14"], "answer": "C++11"},
                {"question": "Which C++ version introduced lambda expressions?", "options": ["C++98", "C++03", "C++11", "C++17"], "answer": "C++11"}
            ]
        },
        "medium": {
            "type": "Descriptive",
            "questions": [
                {"question": "Explain the difference between a class and an object.", "answer": "Class: Blueprint for objects; defines data members and member functions.\nObject: Instance of a class; occupies memory and can use class methods."},
                {"question": "What is a constructor?", "answer": "Special member function invoked automatically when an object is created; used to initialize objects."},
                {"question": "Explain destructor in C++.", "answer": "Special member function called automatically when an object goes out of scope; used to release resources."},
                {"question": "What is copy constructor?", "answer": "Constructor that initializes a new object as a copy of an existing object."},
                {"question": "What is the difference between shallow and deep copy?", "answer": "Shallow copy: Copies member values directly; pointers may reference same memory.\nDeep copy: Copies pointed data to new memory; avoids shared references."},
                {"question": "Explain the concept of encapsulation.", "answer": "Wrapping data and functions in a class and restricting direct access using access specifiers (private, public, protected)."},
                {"question": "Define inheritance and its types in C++.", "answer": "Mechanism to create new class (derived) from existing class (base). Types: Single, Multiple, Multilevel, Hierarchical, Hybrid."},
                {"question": "What is polymorphism in C++?", "answer": "Ability of a function or object to take multiple forms. Types: Compile-time (function overloading, operator overloading), Run-time (virtual functions, dynamic binding)."},
                {"question": "Explain abstraction in C++.", "answer": "Hiding implementation details and exposing only essential features using abstract classes and pure virtual functions."},
                {"question": "Difference between public, private, and protected access specifiers.", "answer": "Public: Accessible everywhere.\nPrivate: Accessible only within class.\nProtected: Accessible within class and derived classes."},
                {"question": "What is function overloading?", "answer": "Defining multiple functions with the same name but different parameter lists."},
                {"question": "Explain operator overloading with example.", "answer": "Redefining operator behavior for user-defined types.\nExample: Complex + Complex to add two complex numbers."},
                {"question": "Difference between function overloading and overriding.", "answer": "Overloading: Compile-time; same function name, different parameters.\nOverriding: Run-time; derived class provides new implementation for base class virtual function."},
                {"question": "What is inline function?", "answer": "Function expanded at the point of call to reduce function call overhead."},
                {"question": "Explain default, constant, and reference parameters.", "answer": "Default: Provided default values if arguments omitted.\nConstant: Cannot modify passed value inside function.\nReference: Function can modify original variable."},
                {"question": "What is recursion?", "answer": "Function calling itself until base condition is met."},
                {"question": "Difference between call by value and call by reference.", "answer": "Value: Copies argument; changes do not affect original.\nReference: Passes address; changes affect original variable."},
                {"question": "Explain friend function.", "answer": "Non-member function that can access private and protected members of a class."},
                {"question": "What is a virtual function?", "answer": "Member function that supports run-time polymorphism; resolved using dynamic binding."},
                {"question": "Difference between pure virtual function and virtual function.", "answer": "Virtual: Has implementation; can be overridden.\nPure virtual function: No implementation; makes class abstract."},
                {"question": "Explain function template with example.", "answer": "Generic function to work with multiple data types.\nExample:\ntemplate <typename T>\nT add(T a, T b) { return a + b; }"},
                {"question": "Explain class template with example.", "answer": "Generic class for multiple data types.\nExample:\ntemplate <class T>\nclass Box { T value; public: void set(T v) { value = v; } T get() { return value; } };"},
                {"question": "Difference between template and macro.", "answer": "Template: Type-safe, resolved at compile-time.\nMacro: Preprocessor directive; not type-safe."},
                {"question": "What is template specialization?", "answer": "Custom implementation of template for a specific data type."},
                {"question": "Difference between function template and class template.", "answer": "Function template: Generic functions.\nClass template: Generic classes."},
                {"question": "What is STL?", "answer": "Collection of C++ template classes for data structures and algorithms."},
                {"question": "Explain vector in STL.", "answer": "Dynamic array supporting random access, automatic resizing, and iterators."},
                {"question": "Difference between vector and array.", "answer": "Vector: Dynamic size, provides methods like push_back(), pop_back().\nArray: Fixed size, cannot resize dynamically."},
                {"question": "Explain list in STL.", "answer": "Doubly linked list supporting fast insertion/deletion anywhere."},
                {"question": "Difference between list and vector.", "answer": "List: Efficient insert/delete, slower random access.\nVector: Fast random access, slower insert/delete in middle."},
                {"question": "What is map in STL?", "answer": "Associative container storing key-value pairs in sorted order; keys are unique."},
                {"question": "Difference between map and unordered_map.", "answer": "Map: Sorted by key; uses balanced tree.\nUnordered_map: Not sorted; uses hash table; faster access."},
                {"question": "Explain stack in STL.", "answer": "LIFO data structure supporting push(), pop(), top()."},
                {"question": "Explain queue in STL.", "answer": "FIFO data structure supporting push(), pop(), front(), back()."},
                {"question": "What is iterator in STL?", "answer": "Object that points to container elements; used for traversal and access."},
                {"question": "Difference between text and binary files in C++.", "answer": "Text: Stores characters; readable.\nBinary: Stores data in binary; more efficient."},
                {"question": "Explain ifstream, ofstream, fstream.", "answer": "ifstream: Input file stream (read).\nofstream: Output file stream (write).\nfstream: Read/write file stream."},
                {"question": "How to check if a file opened successfully?", "answer": "Using file.is_open() or checking stream object in conditional statement."},
                {"question": "Explain opening a file in different modes.", "answer": "Modes: ios::in, ios::out, ios::app, ios::binary, ios::ate, ios::trunc."},
                {"question": "How to read and write binary files?", "answer": "Use read() and write() member functions of fstream."},
                {"question": "Explain dynamic memory allocation in C++.", "answer": "Using new and delete operators to allocate and free memory at runtime."},
                {"question": "Difference between malloc/free and new/delete.", "answer": "malloc/free: C-style; no constructor/destructor call; returns void*.\nnew/delete: C++ style; calls constructor/destructor; type-safe."},
                {"question": "What is RAII in C++?", "answer": "Resource Acquisition Is Initialization; object lifetime manages resource allocation and deallocation automatically."},
                {"question": "Difference between shallow and deep copy in C++.", "answer": "Shallow: Copies pointer values; shared memory.\nDeep: Copies actual data; independent memory."},
                {"question": "Explain multiple inheritance and its issues.", "answer": "A class inherits from more than one base class. Issues: ambiguity (diamond problem), solved using virtual inheritance."},
                {"question": "What is virtual inheritance?", "answer": "Ensures only one copy of base class in multiple inheritance to avoid ambiguity."},
                {"question": "Explain exception handling in C++.", "answer": "Using try, catch, and throw to handle runtime errors safely."},
                {"question": "Difference between throw, catch, and finally (C++ equivalent).", "answer": "throw: Raises an exception.\ncatch: Handles exception.\nfinally: C++ does not have finally; destructor or RAII used."},
                {"question": "Explain smart pointers in C++.", "answer": "Pointer objects that automatically manage memory (unique_ptr, shared_ptr, weak_ptr)."},
                {"question": "Difference between static and dynamic binding in C++.", "answer": "Static: Function call resolved at compile-time (non-virtual).\nDynamic: Function call resolved at run-time (virtual function)."}
            ]
        },
        "hard": {
            "type": "Descriptive",
            "questions": [
                {"question": "Explain the diamond problem in multiple inheritance and how C++ solves it.", "answer": "Occurs when two classes inherit from the same base, and a derived class inherits both. C++ solves it using virtual inheritance to ensure only one copy of the base class."},
                {"question": "Difference between virtual, pure virtual, and abstract class.", "answer": "Virtual function: Can be overridden; allows runtime polymorphism.\nPure virtual function: No implementation; makes class abstract.\nAbstract class: Contains at least one pure virtual function; cannot instantiate."},
                {"question": "Explain object slicing in C++.", "answer": "Assigning a derived object to a base object variable copies only base members; derived members are “sliced off.”"},
                {"question": "Difference between static, dynamic, and polymorphic binding.", "answer": "Static: Resolved at compile-time.\nDynamic: Resolved at runtime using virtual functions.\nPolymorphic: Enables calling derived class functions through base pointer/reference."},
                {"question": "What is a virtual destructor and why is it important?", "answer": "Ensures proper cleanup of derived class objects when deleted through base class pointer. Prevents memory leaks."},
                {"question": "Explain multiple inheritance ambiguity and how to resolve it.", "answer": "Ambiguity occurs when two base classes have same member. Resolved using scope resolution operator or virtual inheritance."},
                {"question": "Explain covariant return types in C++.", "answer": "Derived class function can override a base class virtual function and return a pointer/reference to derived type instead of base type."},
                {"question": "Difference between interface and abstract class in C++.", "answer": "Interface: Pure abstract class (all functions pure virtual).\nAbstract class: May have concrete functions along with pure virtual functions."},
                {"question": "Explain RTTI (Run-Time Type Identification).", "answer": "Mechanism to identify object type at runtime using typeid and dynamic_cast."},
                {"question": "Explain multiple inheritance vs virtual inheritance in C++.", "answer": "Multiple inheritance: Class inherits from multiple base classes.\nVirtual inheritance: Ensures only one copy of common base class to avoid diamond problem."},
                {"question": "Explain template metaprogramming.", "answer": "Using templates to perform computations at compile-time rather than runtime (e.g., factorial using templates)."},
                {"question": "Difference between class template and typename template.", "answer": "class and typename keywords are interchangeable in templates; typename clarifies type parameters in dependent scopes."},
                {"question": "Explain variadic templates.", "answer": "Templates that accept variable number of arguments, enabling flexible generic programming."},
                {"question": "What is SFINAE in C++?", "answer": "\"Substitution Failure Is Not An Error\" allows selective template specialization based on conditions."},
                {"question": "Explain template specialization and partial specialization.", "answer": "Full specialization: Custom template for a specific type.\nPartial specialization: Custom template for a subset of template parameters."},
                {"question": "Difference between compile-time and run-time polymorphism using templates.", "answer": "Compile-time: Function templates resolved at compile-time.\nRun-time: Virtual functions resolved at runtime."},
                {"question": "Explain CRTP (Curiously Recurring Template Pattern).", "answer": "Technique where a derived class inherits from a base class template parameterized by the derived class; enables static polymorphism."},
                {"question": "Explain type traits in C++.", "answer": "Template classes providing information about types at compile-time (e.g., std::is_integral, std::is_pointer)."},
                {"question": "Difference between vector, deque, and list in STL.", "answer": "Vector: Dynamic array, fast random access, slow insert/delete in middle.\nDeque: Double-ended queue; insert/delete at both ends.\nList: Doubly linked list; fast insert/delete anywhere, slow random access."},
                {"question": "Explain unordered_map vs map performance.", "answer": "unordered_map: O(1) average access; hash table; no order.\nmap: O(log n) access; balanced tree; sorted keys."},
                {"question": "Difference between set and multiset.", "answer": "set: Unique elements only.\nmultiset: Allows duplicates; ordered."},
                {"question": "Explain iterators and iterator invalidation.", "answer": "Iterator points to elements in container. Modifying container may invalidate iterators (e.g., push_back() in vector)."},
                {"question": "Explain allocator in STL.", "answer": "Manages memory allocation and deallocation for containers."},
                {"question": "What are functors in STL?", "answer": "Objects that overload operator() and can be used as function objects in algorithms."},
                {"question": "Difference between std::function, function pointers, and lambda.", "answer": "std::function: Type-erased callable object.\nFunction pointer: Points to function.\nLambda: Anonymous inline function object."},
                {"question": "Explain move semantics in STL.", "answer": "Enables transfer of resources from one object to another without copying; uses rvalue references."},
                {"question": "Difference between copy and move constructors.", "answer": "Copy: Creates new object by copying values.\nMove: Transfers resources; efficient for temporary objects."},
                {"question": "Explain emplace_back() vs push_back() in vector.", "answer": "push_back(): Copies/moves object into container.\nemplace_back(): Constructs object in place, avoids extra copy/move."},
                {"question": "Explain RAII principle.", "answer": "Resource Acquisition Is Initialization; objects manage resource lifetime, automatically released in destructor."},
                {"question": "Difference between unique_ptr, shared_ptr, and weak_ptr.", "answer": "unique_ptr: Single ownership; cannot copy.\nshared_ptr: Shared ownership; reference counting.\nweak_ptr: Non-owning reference to shared_ptr; avoids circular reference."},
                {"question": "What is memory leak and how to prevent it?", "answer": "Unreleased memory after allocation. Prevent using smart pointers or proper delete/free calls."},
                {"question": "Explain dangling pointer and its prevention.", "answer": "Pointer pointing to deallocated memory. Prevent by setting pointer to nullptr after deletion."},
                {"question": "Explain memory fragmentation.", "answer": "Free memory scattered into small blocks; reduces allocation efficiency."},
                {"question": "Difference between stack and heap memory in C++.", "answer": "Stack: Automatic memory; limited size; faster allocation.\nHeap: Dynamic memory; manually managed; larger size."},
                {"question": "What are rvalue references?", "answer": "References to temporary objects; enable move semantics and perfect forwarding."},
                {"question": "Explain perfect forwarding.", "answer": "Preserves value category (lvalue/rvalue) of arguments when passing to another function template using std::forward."},
                {"question": "Explain std::thread in C++.", "answer": "Represents a thread of execution; created with a function or callable object."},
                {"question": "Difference between join() and detach() in threads.", "answer": "join(): Waits for thread to finish; blocks caller.\ndetach(): Runs thread independently; cannot join later."},
                {"question": "Explain mutex and lock_guard.", "answer": "mutex: Synchronizes access to shared data.\nlock_guard: RAII wrapper for mutex; locks in constructor, unlocks in destructor."},
                {"question": "Explain deadlock and its prevention.", "answer": "Two threads wait indefinitely for each other’s resources. Prevention: lock ordering, try_lock, timeout."},
                {"question": "Explain condition_variable in C++.", "answer": "Synchronization primitive for threads to wait for a condition to be true; works with mutex."},
                {"question": "Difference between std::async and std::thread.", "answer": "async: Returns future; manages execution automatically.\nthread: Manual thread management; needs join/detach."},
                {"question": "Explain atomic operations in C++.", "answer": "Operations guaranteed to be performed without interruption; prevents race conditions."},
                {"question": "Explain thread-safe singleton in C++.", "answer": "Use std::call_once or static local variable with C++11 guarantee for thread-safe initialization."},
                {"question": "Explain lambda capture by value and by reference.", "answer": "By value [=]: Copies variables into lambda.\nBy reference [&]: Captures variables as references; changes affect original."},
                {"question": "Difference between constexpr and const.", "answer": "const: Value cannot change; evaluated at runtime.\nconstexpr: Compile-time constant; can be used in constant expressions."},
                {"question": "Explain noexcept specifier in C++.", "answer": "Indicates function does not throw exceptions; helps optimization."},
                {"question": "Explain structured bindings in C++17.", "answer": "Allows unpacking tuple-like objects into separate variables.\nauto [x, y] = getPair();"},
                {"question": "Explain range-based for loop.", "answer": "Iterates over container elements without explicit iterator.\nfor(auto &x : vec) { cout << x; }"},
                {"question": "Explain move-only types and why they are used.", "answer": "Objects that can be moved but not copied (e.g., unique_ptr); improves performance by avoiding deep copies."}
            ]
        }
    },
    "DBMS": {
        "easy": {
            "type": "MCQ",
            "questions": [
                {"question": "DBMS stands for:", "options": ["Database Management System", "Data Backup Management System", "Data Base Machine System", "Data Binary Management System"], "answer": "Database Management System"},
                {"question": "The primary goal of a DBMS is:", "options": ["Increase storage cost", "Reduce redundancy", "Decrease data security", "Slow data retrieval"], "answer": "Reduce redundancy"},
                {"question": "Which of these is NOT a type of DBMS?", "options": ["Hierarchical", "Network", "Relational", "Object-Oriented"], "answer": "Object-Oriented"},
                {"question": "Which type of DBMS stores data in tables?", "options": ["Hierarchical", "Network", "Relational", "Graph"], "answer": "Relational"},
                {"question": "SQL stands for:", "options": ["Structured Query Language", "Simple Query Language", "Sequential Query Language", "Standard Query Language"], "answer": "Structured Query Language"},
                {"question": "Which of the following is a DBMS function?", "options": ["Data storage", "Data retrieval", "Data security", "All of the above"], "answer": "All of the above"},
                {"question": "Which of these is a feature of DBMS?", "options": ["Data independence", "Data redundancy", "Complexity", "None"], "answer": "Data independence"},
                {"question": "Which type of DBMS is best for large organizational applications?", "options": ["Hierarchical", "Network", "Relational", "Flat file"], "answer": "Relational"},
                {"question": "DBMS can handle which type of data?", "options": ["Text", "Numbers", "Images", "All of the above"], "answer": "All of the above"},
                {"question": "Which is the most widely used DBMS type?", "options": ["Hierarchical", "Network", "Relational", "Object-Oriented"], "answer": "Relational"},
                {"question": "Which language is used to define the database structure?", "options": ["DML", "DDL", "DCL", "TCL"], "answer": "DDL"},
                {"question": "DML stands for:", "options": ["Data Manipulation Language", "Data Management Language", "Database Manipulation Logic", "Data Modification Logic"], "answer": "Data Manipulation Language"},
                {"question": "DCL stands for:", "options": ["Data Control Language", "Database Control Logic", "Data Collection Language", "Data Communication Language"], "answer": "Data Control Language"},
                {"question": "TCL stands for:", "options": ["Transaction Control Language", "Table Control Language", "Temporary Control Language", "Transaction Communication Language"], "answer": "Transaction Control Language"},
                {"question": "Which command is DDL?", "options": ["SELECT", "CREATE", "INSERT", "UPDATE"], "answer": "CREATE"},
                {"question": "Which command is DML?", "options": ["CREATE", "DROP", "INSERT", "ALTER"], "answer": "INSERT"},
                {"question": "Which command is DCL?", "options": ["GRANT", "DELETE", "UPDATE", "SELECT"], "answer": "GRANT"},
                {"question": "Which command is TCL?", "options": ["COMMIT", "SELECT", "CREATE", "DROP"], "answer": "COMMIT"},
                {"question": "A DBMS provides which kind of access?", "options": ["Single-user", "Multi-user", "Single-file", "None"], "answer": "Multi-user"},
                {"question": "Which of these is a disadvantage of a file-based system?", "options": ["Redundancy", "Consistency", "Security", "Data integrity"], "answer": "Redundancy"},
                {"question": "A primary key:", "options": ["Uniquely identifies each row", "Allows null values", "Duplicates data", "None"], "answer": "Uniquely identifies each row"},
                {"question": "A foreign key:", "options": ["Uniquely identifies rows", "References primary key in another table", "Cannot have duplicates", "Is optional"], "answer": "References primary key in another table"},
                {"question": "Which key allows duplicate values?", "options": ["Primary key", "Candidate key", "Foreign key", "Super key"], "answer": "Foreign key"},
                {"question": "A unique key:", "options": ["Allows null and duplicate", "Allows duplicate but not null", "Allows null but not duplicate", "Allows both"], "answer": "Allows null but not duplicate"},
                {"question": "Composite key is:", "options": ["Single attribute key", "Combination of two or more attributes", "Primary key only", "Foreign key only"], "answer": "Combination of two or more attributes"},
                {"question": "Candidate key:", "options": ["One of the columns eligible for primary key", "Always foreign key", "Always unique key", "None"], "answer": "One of the columns eligible for primary key"},
                {"question": "Super key:", "options": ["Key with extra attributes", "Smallest unique key", "Always primary key", "Only foreign key"], "answer": "Key with extra attributes"},
                {"question": "Referential integrity ensures:", "options": ["Foreign key values must match primary key values", "Primary key cannot be null", "Tables are independent", "Data redundancy"], "answer": "Foreign key values must match primary key values"},
                {"question": "Entity integrity ensures:", "options": ["Primary key is unique", "Foreign key is unique", "Null allowed in primary key", "All values duplicated"], "answer": "Primary key is unique"},
                {"question": "A check constraint is used to:", "options": ["Limit the range of column values", "Create primary key", "Enforce foreign key", "Delete data"], "answer": "Limit the range of column values"},
                {"question": "NOT NULL constraint:", "options": ["Column can store null", "Column cannot store null", "Column is primary key", "Column is foreign key"], "answer": "Column cannot store null"},
                {"question": "DEFAULT constraint:", "options": ["Sets default value for a column", "Deletes default value", "Checks column uniqueness", "Limits column data"], "answer": "Sets default value for a column"},
                {"question": "UNIQUE constraint:", "options": ["Ensures column value is unique", "Allows duplicates", "Null not allowed", "Only applies to foreign key"], "answer": "Ensures column value is unique"},
                {"question": "Auto increment is used to:", "options": ["Automatically generate numeric key", "Insert text data", "Delete rows", "None"], "answer": "Automatically generate numeric key"},
                {"question": "Primary key cannot be:", "options": ["Null", "Unique", "Integer", "Text"], "answer": "Null"},
                {"question": "Foreign key can accept:", "options": ["Null values", "Only primary key", "Duplicates not allowed", "Only numeric"], "answer": "Null values"},
                {"question": "Candidate key can be:", "options": ["Primary key", "Unique key", "Both", "None"], "answer": "Both"},
                {"question": "A table can have how many primary keys?", "options": ["Multiple", "One", "Zero", "Unlimited"], "answer": "One"},
                {"question": "A table can have how many foreign keys?", "options": ["One", "Multiple", "Zero", "Two"], "answer": "Multiple"},
                {"question": "Composite foreign key is:", "options": ["Single column foreign key", "Foreign key on multiple columns", "Primary key", "Super key"], "answer": "Foreign key on multiple columns"},
                {"question": "Which command retrieves data from a table?", "options": ["INSERT", "UPDATE", "SELECT", "DELETE"], "answer": "SELECT"},
                {"question": "Which command adds a new row?", "options": ["INSERT", "SELECT", "UPDATE", "DELETE"], "answer": "INSERT"},
                {"question": "Which command modifies existing rows?", "options": ["INSERT", "UPDATE", "SELECT", "DROP"], "answer": "UPDATE"},
                {"question": "Which command deletes rows from table?", "options": ["INSERT", "UPDATE", "DELETE", "DROP"], "answer": "DELETE"},
                {"question": "Which command removes table structure?", "options": ["DELETE", "DROP", "TRUNCATE", "ALTER"], "answer": "DROP"},
                {"question": "TRUNCATE command:", "options": ["Deletes data and frees space", "Deletes table", "Updates table", "Selects table"], "answer": "Deletes data and frees space"},
                {"question": "ALTER TABLE is used to:", "options": ["Change table structure", "Delete data", "Insert data", "Drop table"], "answer": "Change table structure"},
                {"question": "Which SQL clause filters rows?", "options": ["WHERE", "FROM", "SELECT", "GROUP BY"], "answer": "WHERE"},
                {"question": "ORDER BY clause:", "options": ["Filters data", "Sorts data", "Joins tables", "Deletes data"], "answer": "Sorts data"},
                {"question": "DISTINCT keyword:", "options": ["Returns all rows", "Returns unique rows", "Deletes duplicates", "Updates rows"], "answer": "Returns unique rows"},
                {"question": "LIKE operator is used for:", "options": ["Exact match", "Pattern match", "Sort data", "Aggregate function"], "answer": "Pattern match"},
                {"question": "BETWEEN operator:", "options": ["Checks range", "Checks equality", "Deletes rows", "Joins tables"], "answer": "Checks range"},
                {"question": "IN operator:", "options": ["Checks equality", "Matches value in list", "Deletes rows", "Sorts table"], "answer": "Matches value in list"},
                {"question": "Aggregate functions include:", "options": ["SUM, AVG", "SELECT, FROM", "WHERE, GROUP BY", "INSERT, DELETE"], "answer": "SUM, AVG"},
                {"question": "COUNT() function:", "options": ["Counts rows", "Deletes rows", "Updates rows", "Creates table"], "answer": "Counts rows"},
                {"question": "GROUP BY clause:", "options": ["Sorts rows", "Groups rows for aggregation", "Deletes rows", "Filters rows"], "answer": "Groups rows for aggregation"},
                {"question": "HAVING clause:", "options": ["Filters groups after aggregation", "Filters rows", "Deletes rows", "Creates table"], "answer": "Filters groups after aggregation"},
                {"question": "INNER JOIN:", "options": ["Returns matching rows from both tables", "Returns all rows", "Returns unmatched rows", "Deletes rows"], "answer": "Returns matching rows from both tables"},
                {"question": "LEFT JOIN:", "options": ["Returns only matching rows", "Returns all rows from left table", "Returns only right table", "Deletes rows"], "answer": "Returns all rows from left table"},
                {"question": "RIGHT JOIN:", "options": ["Returns all rows from right table", "Returns all rows from left", "Deletes rows", "Updates rows"], "answer": "Returns all rows from right table"},
                {"question": "What is normalization?", "options": ["Storing duplicate data", "Reducing redundancy", "Deleting tables", "Updating tables"], "answer": "Reducing redundancy"},
                {"question": "1NF ensures:", "options": ["Atomic values", "No redundancy", "Foreign key", "Aggregate functions"], "answer": "Atomic values"},
                {"question": "2NF ensures:", "options": ["Full functional dependency", "Atomic values", "Deleting duplicates", "No primary key"], "answer": "Full functional dependency"},
                {"question": "3NF ensures:", "options": ["Remove transitive dependency", "Full functional dependency", "Atomic values", "No foreign key"], "answer": "Remove transitive dependency"},
                {"question": "BCNF stands for:", "options": ["Boyce-Codd Normal Form", "Basic Codd Form", "Binary Codd Form", "Boyce Codd Function"], "answer": "Boyce-Codd Normal Form"},
                {"question": "ER diagram represents:", "options": ["Tables", "Relationships", "SQL Queries", "Indexes"], "answer": "Relationships"},
                {"question": "Entity in ER diagram:", "options": ["Attribute", "Object", "Relationship", "Column"], "answer": "Object"},
                {"question": "Attribute in ER diagram:", "options": ["Column in table", "Row", "Table", "Key"], "answer": "Column in table"},
                {"question": "Relationship in ER diagram:", "options": ["Link between entities", "Column in table", "Row in table", "Primary key"], "answer": "Link between entities"},
                {"question": "Primary key in ER:", "options": ["Identifies unique entity", "Links tables", "Attribute name", "All rows"], "answer": "Identifies unique entity"},
                {"question": "Candidate key:", "options": ["Optional key", "Unique column eligible for primary", "Foreign key", "Non-key"], "answer": "Unique column eligible for primary"},
                {"question": "Foreign key in ER:", "options": ["Links tables", "Unique column", "Candidate key", "None"], "answer": "Links tables"},
                {"question": "Composite key in ER:", "options": ["Single attribute key", "Combination of attributes", "Foreign key", "Optional key"], "answer": "Combination of attributes"},
                {"question": "Weak entity:", "options": ["Can exist independently", "Depends on strong entity", "Has primary key", "None"], "answer": "Depends on strong entity"},
                {"question": "Strong entity:", "options": ["Has unique identifier", "Depends on another entity", "No key", "Weak entity"], "answer": "Has unique identifier"},
                {"question": "Many-to-many relationship is represented by:", "options": ["Single table", "Associative table", "Primary key", "Foreign key"], "answer": "Associative table"},
                {"question": "One-to-one relationship is represented by:", "options": ["Shared key", "Separate table", "Multiple keys", "Attribute"], "answer": "Shared key"},
                {"question": "1NF prohibits:", "options": ["Multi-valued attributes", "Primary key", "Foreign key", "Index"], "answer": "Multi-valued attributes"},
                {"question": "Functional dependency:", "options": ["Attribute depends on another", "Attributes independent", "Redundant data", "Foreign key"], "answer": "Attribute depends on another"},
                {"question": "Transitive dependency occurs when:", "options": ["A → B → C", "A → B", "C → D", "None"], "answer": "A → B → C"},
                {"question": "A transaction is:", "options": ["Single SQL query", "Logical unit of work", "Table", "Index"], "answer": "Logical unit of work"},
                {"question": "ACID properties:", "options": ["Atomicity, Consistency, Isolation, Durability", "Atomicity, Concurrency, Integrity, Durability", "Accuracy, Consistency, Integrity, Durability", "Atomicity, Concurrency, Isolation, Delete"], "answer": "Atomicity, Consistency, Isolation, Durability"},
                {"question": "Atomicity ensures:", "options": ["All or none", "Data is unique", "Transactions isolated", "Durability"], "answer": "All or none"},
                {"question": "Consistency ensures:", "options": ["Data validity before and after", "Data is atomic", "Transactions isolated", "None"], "answer": "Data validity before and after"},
                {"question": "Isolation ensures:", "options": ["Transaction independent of others", "Consistency", "Durability", "Atomicity"], "answer": "Transaction independent of others"},
                {"question": "Durability ensures:", "options": ["Changes permanent after commit", "Transaction rolled back", "Data unique", "Isolation"], "answer": "Changes permanent after commit"},
                {"question": "COMMIT command:", "options": ["Saves transaction", "Rollbacks transaction", "Deletes table", "Inserts data"], "answer": "Saves transaction"},
                {"question": "ROLLBACK command:", "options": ["Saves transaction", "Reverts transaction", "Deletes table", "Updates data"], "answer": "Reverts transaction"},
                {"question": "Savepoint command:", "options": ["Marks point to rollback", "Commits transaction", "Deletes data", "Inserts data"], "answer": "Marks point to rollback"},
                {"question": "Deadlock occurs when:", "options": ["Two transactions wait for each other", "Data lost", "Transaction committed", "Table dropped"], "answer": "Two transactions wait for each other"},
                {"question": "Locks are used for:", "options": ["Prevent concurrency problems", "Delete table", "Commit transaction", "Insert data"], "answer": "Prevent concurrency problems"},
                {"question": "Shared lock allows:", "options": ["Multiple reads", "Multiple writes", "Single read", "Single write"], "answer": "Multiple reads"},
                {"question": "Exclusive lock allows:", "options": ["Single read/write", "Multiple reads", "Multiple writes", "None"], "answer": "Single read/write"},
                {"question": "Serializability ensures:", "options": ["Correct concurrent transactions", "Duplicate data", "Unique keys", "Transaction rollback"], "answer": "Correct concurrent transactions"},
                {"question": "Cascading rollback:", "options": ["One rollback triggers others", "All commits", "All saves", "Unique keys"], "answer": "One rollback triggers others"},
                {"question": "Log file stores:", "options": ["Transaction history", "Table structure", "Index", "Views"], "answer": "Transaction history"},
                {"question": "Two-phase commit ensures:", "options": ["Atomic distributed transactions", "Isolation", "Serializability", "Deadlock"], "answer": "Atomic distributed transactions"},
                {"question": "Dirty read occurs when:", "options": ["Transaction reads uncommitted data", "Data unique", "Primary key", "Foreign key"], "answer": "Transaction reads uncommitted data"},
                {"question": "Phantom read occurs when:", "options": ["Row changes", "New rows appear between reads", "Table dropped", "Table created"], "answer": "New rows appear between reads"},
                {"question": "Lost update problem occurs when:", "options": ["Concurrent updates overwrite", "Transaction fails", "Table deleted", "Insert fails"], "answer": "Concurrent updates overwrite"}
            ]
        },
        "medium": {
            "type": "Descriptive",
            "questions": [
                {"question": "Explain the three levels of DBMS architecture.", "answer": "Internal Level: How data is stored physically (storage structures).\nConceptual Level: Logical structure of entire database.\nExternal Level: Views for different users/applications."},
                {"question": "What is data independence?", "answer": "Ability to change schema at one level without affecting other levels.\nLogical independence: Change conceptual schema.\nPhysical independence: Change internal schema."},
                {"question": "Differentiate DBMS and file-based system.", "answer": "DBMS: Reduces redundancy, ensures integrity, supports multi-user.\nFile system: Data redundancy, poor security, manual management."},
                {"question": "What is a database schema?", "answer": "Structure of database defining tables, fields, relationships, constraints."},
                {"question": "Differentiate physical and logical database.", "answer": "Physical: Actual storage on disk.\nLogical: Conceptual representation of data for users."},
                {"question": "What are the advantages of DBMS?", "answer": "Reduced redundancy, data integrity, security, concurrent access, backups."},
                {"question": "What is the role of a DBMS engine?", "answer": "Executes queries, manages transactions, enforces constraints, manages storage."},
                {"question": "What is a database instance?", "answer": "Collection of data stored in database at a particular time."},
                {"question": "What are DBMS languages?", "answer": "DDL: Create/alter/drop tables\nDML: Insert/update/delete data\nDCL: Grant/revoke permissions\nTCL: Commit/rollback transactions"},
                {"question": "Difference between primary key and unique key.", "answer": "Primary key: Unique, cannot be null.\nUnique key: Unique, can accept one null value."},
                {"question": "Explain foreign key and its role.", "answer": "Attribute in a table that references primary key in another table to maintain referential integrity."},
                {"question": "What is candidate key?", "answer": "Column(s) eligible to be a primary key; must be unique."},
                {"question": "What is composite key?", "answer": "Combination of two or more columns to uniquely identify a row."},
                {"question": "Explain super key.", "answer": "Set of one or more attributes that uniquely identifies a row; may include extra attributes."},
                {"question": "What is referential integrity?", "answer": "Foreign key values must match primary key values or be null."},
                {"question": "What is entity integrity?", "answer": "Primary key value cannot be null; ensures unique identification."},
                {"question": "Difference between check constraint and default constraint.", "answer": "Check: Limits values of a column (e.g., age > 0).\nDefault: Assigns default value if none provided."},
                {"question": "What is the purpose of NOT NULL constraint?", "answer": "Ensures column must have a value; cannot accept null."},
                {"question": "Explain cascade delete.", "answer": "Deleting a parent row automatically deletes dependent child rows referencing it."},
                {"question": "Explain difference between unique key and foreign key.", "answer": "Unique key: Ensures uniqueness within table.\nForeign key: Links to primary key in another table."},
                {"question": "Explain the difference between INNER JOIN and LEFT JOIN.", "answer": "INNER JOIN: Returns only matching rows.\nLEFT JOIN: Returns all rows from left table, matching from right if exists."},
                {"question": "What is a subquery?", "answer": "Query embedded inside another query, used to provide values to main query."},
                {"question": "Explain aggregate functions in SQL.", "answer": "Functions that summarize data: SUM, AVG, COUNT, MAX, MIN."},
                {"question": "Difference between WHERE and HAVING clauses.", "answer": "WHERE: Filters rows before aggregation.\nHAVING: Filters groups after aggregation."},
                {"question": "Explain difference between TRUNCATE and DELETE.", "answer": "DELETE: Removes rows; can rollback; slower; can use WHERE.\nTRUNCATE: Deletes all rows; cannot rollback; faster; cannot use WHERE."},
                {"question": "What is the difference between UNION and UNION ALL?", "answer": "UNION: Removes duplicate rows.\nUNION ALL: Keeps all rows, including duplicates."},
                {"question": "Difference between primary key and index.", "answer": "Primary key: Uniquely identifies rows, enforces constraints.\nIndex: Improves query performance; can be on any column."},
                {"question": "What are views?", "answer": "Virtual tables created from queries; do not store data physically."},
                {"question": "Difference between clustered and non-clustered index.", "answer": "Clustered: Table rows stored in order of index.\nNon-clustered: Separate structure points to table rows."},
                {"question": "What is a stored procedure?", "answer": "Precompiled SQL code stored in database, can be executed multiple times."},
                {"question": "What is normalization?", "answer": "Process to reduce redundancy and improve data integrity in tables."},
                {"question": "Define 1NF with example.", "answer": "Table has atomic values (no repeating groups).\nExample: Separate phone numbers into multiple rows."},
                {"question": "Define 2NF.", "answer": "Table in 1NF and all non-key attributes fully functionally dependent on primary key."},
                {"question": "Define 3NF.", "answer": "Table in 2NF and no transitive dependency exists between non-key attributes."},
                {"question": "What is BCNF?", "answer": "Special case of 3NF; every determinant is a candidate key."},
                {"question": "Explain ER diagram.", "answer": "Graphical representation of entities, attributes, and relationships."},
                {"question": "Define entity and attribute.", "answer": "Entity: Object with distinct existence (e.g., Student).\nAttribute: Property of entity (e.g., Name, Roll No)."},
                {"question": "Explain weak entity.", "answer": "Cannot exist without strong entity; identified with partial key."},
                {"question": "Difference between one-to-many and many-to-many relationships.", "answer": "One-to-many: Single entity linked to multiple entities.\nMany-to-many: Multiple entities linked to multiple entities; often implemented via junction table."},
                {"question": "What is transitive dependency?", "answer": "Attribute depends on another non-key attribute (A → B → C)."},
                {"question": "Define a transaction.", "answer": "Logical unit of work performed on database; must satisfy ACID properties."},
                {"question": "What are ACID properties?", "answer": "Atomicity: All or none.\nConsistency: Maintains database rules.\nIsolation: Transactions independent.\nDurability: Committed changes persist."},
                {"question": "Explain COMMIT and ROLLBACK.", "answer": "COMMIT: Saves transaction permanently.\nROLLBACK: Reverts transaction to previous state."},
                {"question": "What is isolation level in DBMS?", "answer": "Degree to which transactions are isolated from others (Read Uncommitted, Read Committed, Repeatable Read, Serializable)."},
                {"question": "Define deadlock.", "answer": "Situation where two or more transactions wait indefinitely for resources held by each other."},
                {"question": "What is dirty read?", "answer": "Transaction reads uncommitted data from another transaction."},
                {"question": "What is phantom read?", "answer": "Transaction reads different rows when executed multiple times due to other transactions inserting/deleting rows."},
                {"question": "What is a savepoint?", "answer": "Intermediate point within a transaction to which rollback can be performed without affecting entire transaction."},
                {"question": "Difference between pessimistic and optimistic concurrency control.", "answer": "Pessimistic: Locks data during transaction to prevent conflicts.\nOptimistic: Assumes conflicts rare; checks before commit."},
                {"question": "What is two-phase commit?", "answer": "Protocol to ensure atomicity of distributed transactions; involves prepare phase and commit phase."}
            ]
        },
        "hard": {
            "type": "Descriptive",
            "questions": [
                {"question": "Explain the difference between correlated and non-correlated subqueries.", "answer": "Non-correlated: Subquery runs once; independent of outer query.\nCorrelated: Subquery depends on outer query for each row; executes multiple times."},
                {"question": "What is a self-join? Give an example.", "answer": "Joining a table with itself to compare rows.\nExample:\nSELECT A.emp_id, B.emp_id FROM Employee A, Employee B WHERE A.manager_id = B.emp_id;"},
                {"question": "Explain nested aggregation in SQL.", "answer": "Using aggregate functions inside another aggregate.\nExample: Finding department with max average salary:\nSELECT dept_id FROM Employee GROUP BY dept_id HAVING AVG(salary) = (SELECT MAX(AVG(salary)) FROM Employee GROUP BY dept_id);"},
                {"question": "What are window functions? Give example.", "answer": "Functions applied over partitions of rows, retaining all rows.\nExample:\nSELECT emp_id, salary, RANK() OVER (PARTITION BY dept_id ORDER BY salary DESC) FROM Employee;"},
                {"question": "Explain CTE (Common Table Expression).", "answer": "Temporary named result set used within a query.\nExample:\nWITH DeptAvg AS (SELECT dept_id, AVG(salary) AS avg_salary FROM Employee GROUP BY dept_id) SELECT * FROM DeptAvg;"},
                {"question": "Difference between ROLLUP and CUBE.", "answer": "ROLLUP: Provides hierarchical subtotal aggregation.\nCUBE: Provides aggregation for all combinations of columns."},
                {"question": "Explain recursive queries in SQL.", "answer": "Queries that call themselves to process hierarchical data.\nExample: Employee-manager hierarchy using CTE with recursion."},
                {"question": "What is a materialized view?", "answer": "View whose results are physically stored; improves query performance."},
                {"question": "Difference between DELETE, TRUNCATE, and DROP.", "answer": "DELETE: Deletes rows, can rollback, triggers activated.\nTRUNCATE: Deletes all rows, cannot rollback, faster.\nDROP: Deletes table structure permanently."},
                {"question": "Explain INSTEAD OF triggers.", "answer": "Trigger executed in place of insert, update, or delete on a view to allow modifications."},
                {"question": "Explain AFTER triggers.", "answer": "Trigger executed after insert, update, or delete operations on a table."},
                {"question": "Difference between FOR EACH ROW and FOR EACH STATEMENT triggers.", "answer": "FOR EACH ROW: Executes for every affected row.\nFOR EACH STATEMENT: Executes once per SQL statement."},
                {"question": "Explain updatable vs non-updatable views.", "answer": "Updatable: Can insert, update, delete rows through view.\nNon-updatable: Cannot modify underlying tables through view (due to joins, aggregations)."},
                {"question": "Explain difference between union and join.", "answer": "UNION: Combines results vertically; removes duplicates (UNION ALL keeps duplicates).\nJOIN: Combines tables horizontally based on keys."},
                {"question": "What are set operations in SQL?", "answer": "Operations combining results of two queries: UNION, UNION ALL, INTERSECT, MINUS."},
                {"question": "What is an index?", "answer": "Data structure that improves query speed by providing fast lookup."},
                {"question": "Difference between clustered and non-clustered index.", "answer": "Clustered: Determines physical storage order of table rows; only one per table.\nNon-clustered: Separate structure pointing to table rows; multiple allowed."},
                {"question": "What is a composite index?", "answer": "Index on multiple columns; improves queries using those columns in combination."},
                {"question": "Explain covering index.", "answer": "Index containing all columns needed for a query; avoids accessing table data."},
                {"question": "Difference between dense and sparse index.", "answer": "Dense: Index entry for every record.\nSparse: Index entry for only some records; reduces storage."},
                {"question": "Explain B-Tree vs B+ Tree indexes.", "answer": "B-Tree: Keys stored at all levels; used in older DBMS.\nB+ Tree: All keys at leaf; internal nodes for navigation; efficient range queries."},
                {"question": "What is query optimization?", "answer": "Process of improving query performance by choosing efficient execution plan."},
                {"question": "Explain cost-based query optimization.", "answer": "Evaluates multiple execution plans and chooses one with lowest estimated cost."},
                {"question": "Difference between heuristic and cost-based optimization.", "answer": "Heuristic: Uses rules like pushing selections.\nCost-based: Uses statistics to choose lowest-cost plan."},
                {"question": "Explain execution plan.", "answer": "Steps database follows to execute query; includes joins, indexes, and scans."},
                {"question": "Explain ACID properties with examples.", "answer": "Atomicity: All operations succeed or fail.\nConsistency: Constraints preserved.\nIsolation: Concurrent transactions do not interfere.\nDurability: Committed changes persist."},
                {"question": "What is isolation level “Serializable”?", "answer": "Ensures full isolation; transactions appear sequential; prevents dirty, non-repeatable, and phantom reads."},
                {"question": "Explain phantom problem in concurrency.", "answer": "New rows appear in range query due to concurrent transactions; violates repeatable read."},
                {"question": "Explain deadlock detection and prevention.", "answer": "Detection: Wait-for graph to detect cycles.\nPrevention: Lock ordering, timeout, or optimistic concurrency."},
                {"question": "What is two-phase locking (2PL)?", "answer": "Growing phase: Acquire locks.\nShrinking phase: Release locks.\nEnsures serializability."},
                {"question": "Explain cascading rollback.", "answer": "Rolling back one transaction forces rollback of dependent transactions due to uncommitted changes."},
                {"question": "Difference between pessimistic and optimistic concurrency control.", "answer": "Pessimistic: Locks data to prevent conflicts.\nOptimistic: Checks for conflicts before commit; retries if needed."},
                {"question": "What is distributed transaction?", "answer": "Transaction executed across multiple databases; requires coordination (2PC)."},
                {"question": "Explain 2-phase commit protocol.", "answer": "Prepare phase: All nodes confirm readiness.\nCommit phase: If all agree, transaction commits; else rollback."},
                {"question": "What is savepoint in transaction?", "answer": "Intermediate point to rollback part of transaction without affecting full transaction."},
                {"question": "Explain difference between 3NF and BCNF.", "answer": "3NF: Removes transitive dependency.\nBCNF: Every determinant is candidate key; stricter than 3NF."},
                {"question": "What is multi-valued dependency?", "answer": "When one attribute determines multiple values of another independent attribute; addressed in 4NF."},
                {"question": "Explain 4NF.", "answer": "Table is in BCNF and no multi-valued dependencies exist."},
                {"question": "Explain 5NF.", "answer": "Table is in 4NF and decomposed into smaller tables without loss of data; addresses join dependencies."},
                {"question": "Difference between strong and weak entity.", "answer": "Strong: Has primary key.\nWeak: Depends on strong entity; identified by partial key and foreign key."},
                {"question": "Explain ER modeling for many-to-many relationship.", "answer": "Requires associative (junction) table with foreign keys from both entities."},
                {"question": "Difference between aggregation and composition in ER modeling.", "answer": "Aggregation: “Has-a” relationship; entities maintain independence.\nComposition: Stronger relationship; lifecycle of part depends on whole."},
                {"question": "What is denormalization? Why used?", "answer": "Introducing redundancy to improve read performance; reduces joins in queries."},
                {"question": "Explain surrogate key.", "answer": "Artificial key (like auto-increment) used as primary key instead of natural key."},
                {"question": "Explain hierarchical vs network model.", "answer": "Hierarchical: Tree structure; parent-child.\nNetwork: Graph structure; multiple parent-child relationships."},
                {"question": "What is distributed database?", "answer": "Database stored across multiple sites connected via network; appears as single database to users."},
                {"question": "Explain replication and fragmentation.", "answer": "Replication: Copying data at multiple sites for availability.\nFragmentation: Dividing database into smaller parts (horizontal/vertical) for efficiency."},
                {"question": "What is CAP theorem?", "answer": "In distributed systems, cannot simultaneously guarantee: Consistency, Availability, Partition tolerance."},
                {"question": "Difference between shared-nothing and shared-disk architecture.", "answer": "Shared-nothing: Each node has own storage and memory; scales horizontally.\nShared-disk: All nodes access same storage; requires coordination."},
                {"question": "What is query optimization in distributed databases?", "answer": "Selecting the most efficient plan considering network cost, local execution cost, and data transfer cost."}
            ]
        }
    },
    "Cloud": {
        "easy": {
            "type": "MCQ",
            "questions": [
                {"question": "Cloud computing is defined as:", "options": ["Local storage of data","On-demand delivery of computing resources over the Internet","Using USB drives","Desktop computing"], "answer": "On-demand delivery of computing resources over the Internet"},
                {"question": "Which of the following is a characteristic of cloud computing?", "options": ["On-demand self-service","Limited storage","Manual provisioning","Single-user access"], "answer": "On-demand self-service"},
                {"question": "Cloud computing provides:", "options": ["Storage only","Computing power only","Both storage and computing power","None of the above"], "answer": "Both storage and computing power"},
                {"question": "Pay-per-use model in cloud is called:", "options": ["Subscription model","On-demand model","CAPEX","OPEX"], "answer": "On-demand model"},
                {"question": "Which feature provides automatic adjustment of resources?", "options": ["Elasticity","Redundancy","Virtualization","Multitenancy"], "answer": "Elasticity"},
                {"question": "Multitenancy in cloud refers to:", "options": ["Multiple users sharing the same resources","Multiple servers in a network","Multiple operating systems","None of the above"], "answer": "Multiple users sharing the same resources"},
                {"question": "Which of these is NOT a cloud characteristic?", "options": ["Broad network access","Measured service","Manual resource allocation","Resource pooling"], "answer": "Manual resource allocation"},
                {"question": "A cloud that allows services over the Internet is:", "options": ["Public cloud","Private cloud","Hybrid cloud","Community cloud"], "answer": "Public cloud"},
                {"question": "A cloud owned and used by a single organization is:", "options": ["Public cloud","Private cloud","Hybrid cloud","Community cloud"], "answer": "Private cloud"},
                {"question": "A cloud accessible by multiple organizations with shared concerns is:", "options": ["Public cloud","Private cloud","Community cloud","Hybrid cloud"], "answer": "Community cloud"},
                {"question": "A combination of public and private cloud is called:", "options": ["Hybrid cloud","Community cloud","Distributed cloud","Multi-cloud"], "answer": "Hybrid cloud"},
                {"question": "Which of these is a benefit of cloud computing?", "options": ["Scalability","Data loss","Manual updates","Hardware dependence"], "answer": "Scalability"},
                {"question": "Which of these is a drawback of cloud computing?", "options": ["On-demand access","Security concerns","Scalability","Reliability"], "answer": "Security concerns"},
                {"question": "The delivery of computing resources over the Internet is called:", "options": ["Grid computing","Cloud computing","Local computing","Parallel computing"], "answer": "Cloud computing"},
                {"question": "Which of these is required to access cloud services?", "options": ["High-end GPU","Internet connection","Local server","USB drive"], "answer": "Internet connection"},
                {"question": "Cloud computing enables users to:", "options": ["Purchase physical servers","Use resources without owning infrastructure","Avoid Internet access","Work only offline"], "answer": "Use resources without owning infrastructure"},
                {"question": "Measured service in cloud means:", "options": ["Resources are unlimited","Users are charged based on usage","Only storage is measured","Users own the resources"], "answer": "Users are charged based on usage"},
                {"question": "Which of these is a type of cloud service?", "options": ["SaaS","PaaS","IaaS","All of the above"], "answer": "All of the above"},
                {"question": "Broad network access allows users to access cloud from:", "options": ["PCs only","Laptops only","Any device over the Internet","Servers only"], "answer": "Any device over the Internet"},
                {"question": "Which term describes the ability to add or remove resources dynamically?", "options": ["Elasticity","Virtualization","Redundancy","Cloud bursting"], "answer": "Elasticity"},
                {"question": "IaaS stands for:", "options": ["Internet as a Service","Infrastructure as a Service","Integration as a Service","Information as a Service"], "answer": "Infrastructure as a Service"},
                {"question": "PaaS stands for:", "options": ["Platform as a Service","Processor as a Service","Platform and Software","Programming as a Service"], "answer": "Platform as a Service"},
                {"question": "SaaS stands for:", "options": ["Storage as a Service","Software as a Service","System as a Service","Security as a Service"], "answer": "Software as a Service"},
                {"question": "Which cloud model provides virtualized hardware resources?", "options": ["SaaS","PaaS","IaaS","DaaS"], "answer": "IaaS"},
                {"question": "Which cloud model provides ready-to-use applications over the Internet?", "options": ["IaaS","PaaS","SaaS","DaaS"], "answer": "SaaS"},
                {"question": "Which cloud model is suitable for developers to build applications?", "options": ["SaaS","PaaS","IaaS","None"], "answer": "PaaS"},
                {"question": "Examples of SaaS include:", "options": ["Google Workspace, Salesforce","AWS EC2","Microsoft Azure Virtual Machines","VMware"], "answer": "Google Workspace, Salesforce"},
                {"question": "Examples of PaaS include:", "options": ["AWS Lambda, Google App Engine","Google Docs","Dropbox","GitHub"], "answer": "AWS Lambda, Google App Engine"},
                {"question": "Examples of IaaS include:", "options": ["AWS EC2, Google Compute Engine","Google Drive","Microsoft Office 365","Heroku"], "answer": "AWS EC2, Google Compute Engine"},
                {"question": "Which service model offers maximum control to the user?", "options": ["SaaS","PaaS","IaaS","DaaS"], "answer": "IaaS"},
                {"question": "In SaaS, who manages the infrastructure?", "options": ["User","Cloud provider","Developer","Third party"], "answer": "Cloud provider"},
                {"question": "In IaaS, the user is responsible for:", "options": ["Hardware maintenance","Operating system and applications","Network hardware","Data center security"], "answer": "Operating system and applications"},
                {"question": "Which service model is also called “software on demand”?", "options": ["IaaS","PaaS","SaaS","DaaS"], "answer": "SaaS"},
                {"question": "Which model reduces hardware management responsibilities?", "options": ["SaaS","PaaS","IaaS","Both SaaS and PaaS"], "answer": "Both SaaS and PaaS"},
                {"question": "Which service model is preferred for hosting databases?", "options": ["SaaS","PaaS","IaaS","None"], "answer": "IaaS"},
                {"question": "A user cannot customize application logic in:", "options": ["SaaS","PaaS","IaaS","None"], "answer": "SaaS"},
                {"question": "Which model allows users to deploy custom applications without managing infrastructure?", "options": ["SaaS","PaaS","IaaS","FaaS"], "answer": "PaaS"},
                {"question": "Which service model is used in Google App Engine?", "options": ["SaaS","PaaS","IaaS","DaaS"], "answer": "PaaS"},
                {"question": "Which service model is used in Microsoft Azure Virtual Machines?", "options": ["SaaS","PaaS","IaaS","None"], "answer": "IaaS"},
                {"question": "In which model, the cloud provider manages all resources?", "options": ["IaaS","PaaS","SaaS","FaaS"], "answer": "SaaS"},
                {"question": "Public cloud is:", "options": ["Owned by a single organization","Accessible over the Internet by everyone","Shared among multiple organizations with shared goals","A combination of private and public cloud"], "answer": "Accessible over the Internet by everyone"},
                {"question": "Private cloud is:", "options": ["Owned by a single organization","Accessible by multiple organizations","Managed by third party","Publicly accessible"], "answer": "Owned by a single organization"},
                {"question": "Community cloud is used by:", "options": ["Individuals","Multiple organizations with shared goals","Government agencies only","Startups only"], "answer": "Multiple organizations with shared goals"},
                {"question": "Hybrid cloud is a combination of:", "options": ["Private and public cloud","Community and public cloud","Private and community cloud","Two public clouds"], "answer": "Private and public cloud"},
                {"question": "Amazon Web Services (AWS) is an example of:", "options": ["Private cloud","Public cloud","Hybrid cloud","Community cloud"], "answer": "Public cloud"},
                {"question": "Hybrid cloud is useful for:", "options": ["Handling peak loads on public cloud while critical data remains on private cloud","Only public applications","Only internal applications","None"], "answer": "Handling peak loads on public cloud while critical data remains on private cloud"},
                {"question": "Which deployment model offers maximum control and security?", "options": ["Public cloud","Private cloud","Hybrid cloud","Community cloud"], "answer": "Private cloud"},
                {"question": "Which deployment model is cost-effective for startups?", "options": ["Private cloud","Public cloud","Hybrid cloud","Community cloud"], "answer": "Public cloud"},
                {"question": "Cloud that integrates services from multiple cloud providers is called:", "options": ["Multi-cloud","Hybrid cloud","Public cloud","Private cloud"], "answer": "Multi-cloud"},
                {"question": "Community cloud is mainly used for:", "options": ["Collaboration among organizations","Individual use","Local computing","None"], "answer": "Collaboration among organizations"},
                {"question": "Virtualization allows multiple OS to run on:", "options": ["Single server","Multiple servers","Desktop only","Mobile devices"], "answer": "Single server"},
                {"question": "Hypervisor is used for:", "options": ["Creating virtual machines","Managing physical storage","Network routing","Security"], "answer": "Creating virtual machines"},
                {"question": "Examples of hypervisors:", "options": ["VMware, Hyper-V","Windows, Linux","AWS, Azure","Dropbox, Google Drive"], "answer": "VMware, Hyper-V"},
                {"question": "Cloud storage is:", "options": ["Storage on local disk","Storage over the Internet","USB storage","None"], "answer": "Storage over the Internet"},
                {"question": "Types of cloud storage:", "options": ["Object, block, file storage","HDD only","SSD only","Tape storage only"], "answer": "Object, block, file storage"},
                {"question": "AWS S3 is an example of:", "options": ["Object storage","Block storage","File storage","Local storage"], "answer": "Object storage"},
                {"question": "Which storage type is best for databases?", "options": ["Object storage","Block storage","File storage","Tape storage"], "answer": "Block storage"},
                {"question": "Which storage type is best for backups and archiving?", "options": ["Object storage","Block storage","File storage","Cache"], "answer": "Object storage"},
                {"question": "Cloud storage provides:", "options": ["Scalability","High availability","Durability","All of the above"], "answer": "All of the above"},
                {"question": "Redundant storage ensures:", "options": ["Data is stored in multiple locations","Data is stored only once","Data cannot be accessed","Data is deleted automatically"], "answer": "Data is stored in multiple locations"}
            ]
        },
        "medium": {
            "type": "Descriptive",
            "questions": [
                {"question": "Define cloud computing and explain its key characteristics.", "answer": "Cloud computing is the on-demand delivery of computing resources (servers, storage, databases, networking, software) over the Internet. Key characteristics: on-demand self-service, broad network access, resource pooling, rapid elasticity, and measured service."},
                {"question": "What is elasticity in cloud computing?", "answer": "Elasticity refers to the ability of the cloud to automatically scale resources up or down based on demand, ensuring efficient resource utilization and cost-effectiveness."},
                {"question": "Explain multitenancy in cloud computing.", "answer": "Multitenancy allows multiple users (tenants) to share the same physical resources while keeping data isolated. It reduces cost and improves resource utilization."},
                {"question": "Differentiate between CAPEX and OPEX in cloud computing.", "answer": "CAPEX (Capital Expenditure) is upfront investment in hardware/software. OPEX (Operational Expenditure) is pay-per-use or subscription-based costs in cloud computing."},
                {"question": "What is resource pooling in cloud computing?", "answer": "Resource pooling is the sharing of computing resources (CPU, memory, storage) among multiple users dynamically based on demand."},
                {"question": "Explain the concept of measured service in cloud computing.", "answer": "Measured service means cloud resources are monitored, controlled, and billed based on usage (e.g., storage consumed, CPU hours used)."},
                {"question": "Differentiate cloud computing from traditional computing.", "answer": "Cloud computing provides scalable, on-demand, pay-per-use resources accessible over the Internet, while traditional computing requires local infrastructure, maintenance, and fixed costs."},
                {"question": "Define cloud bursting and its use case.", "answer": "Cloud bursting allows an organization to use private cloud resources primarily and 'burst' excess workloads to a public cloud during peak demand."},
                {"question": "What is the difference between grid computing and cloud computing?", "answer": "Grid computing connects multiple computers for a single task. Cloud computing provides on-demand, scalable resources over the Internet for multiple tasks and services."},
                {"question": "Explain the concept of pay-per-use in cloud computing.", "answer": "Pay-per-use charges users based on actual consumption of resources, such as storage space, CPU cycles, or bandwidth, making it cost-efficient."},
                {"question": "Explain the IaaS (Infrastructure as a Service) model with examples.", "answer": "IaaS provides virtualized hardware resources like servers, storage, and networking. Users manage OS and applications. Example: AWS EC2, Google Compute Engine, Azure Virtual Machines."},
                {"question": "Explain the PaaS (Platform as a Service) model with examples.", "answer": "PaaS provides a platform for developers to build, deploy, and manage applications without managing underlying infrastructure. Example: Google App Engine, Heroku, AWS Elastic Beanstalk."},
                {"question": "Explain the SaaS (Software as a Service) model with examples.", "answer": "SaaS provides ready-to-use applications accessible via the Internet. Users do not manage infrastructure or platform. Example: Google Workspace, Salesforce, Microsoft Office 365."},
                {"question": "Compare IaaS, PaaS, and SaaS.", "answer": "IaaS: Provides virtual machines, storage; user manages OS and apps. PaaS: Provides platform to develop apps; user manages apps only. SaaS: Provides software applications; user only uses the app."},
                {"question": "What is serverless computing? Give examples.", "answer": "Serverless computing allows developers to run code without managing servers. The cloud provider automatically handles scaling and infrastructure. Example: AWS Lambda, Azure Functions, Google Cloud Functions."},
                {"question": "Explain Function as a Service (FaaS).", "answer": "FaaS is a serverless model where developers write discrete functions triggered by events, with billing based on execution time. Example: AWS Lambda."},
                {"question": "How does cloud computing reduce IT infrastructure cost?", "answer": "Cloud reduces upfront hardware investment, provides on-demand resources, minimizes maintenance, and follows pay-per-use billing."},
                {"question": "What is the difference between public cloud, private cloud, and hybrid cloud in service context?", "answer": "Public cloud: Services available to all users over the Internet. Private cloud: Exclusive services for one organization. Hybrid cloud: Combination of private and public clouds for flexibility."},
                {"question": "Explain the difference between multicloud and hybrid cloud.", "answer": "Multicloud uses multiple cloud providers for redundancy or specialization. Hybrid cloud combines private and public clouds for workload distribution."},
                {"question": "What is containerization and how is it different from virtualization?", "answer": "Containers package applications and dependencies for consistent deployment across environments. Unlike virtual machines, containers share the host OS, making them lightweight and faster to start."},
                {"question": "Define private cloud and its advantages.", "answer": "Private cloud is a cloud environment dedicated to one organization. Advantages: enhanced security, compliance, full control over resources."},
                {"question": "Define public cloud and its advantages.", "answer": "Public cloud is operated by third-party providers accessible via the Internet. Advantages: cost-effective, scalable, low maintenance."},
                {"question": "Explain hybrid cloud and its use cases.", "answer": "Hybrid cloud combines private and public cloud environments. Use case: sensitive data stored privately, while public cloud handles peak workloads."},
                {"question": "What is a community cloud? Give examples.", "answer": "Community cloud is shared among organizations with common goals or regulatory requirements. Example: Government agency clouds, healthcare clouds."},
                {"question": "Explain virtualization in cloud computing.", "answer": "Virtualization allows multiple virtual machines to run on a single physical server, sharing resources efficiently."},
                {"question": "What is a hypervisor? Explain its types.", "answer": "A hypervisor manages virtual machines. Types: Type 1 (bare-metal): Runs directly on hardware (e.g., VMware ESXi). Type 2 (hosted): Runs on OS (e.g., VirtualBox)."},
                {"question": "Explain the role of virtual machines in cloud computing.", "answer": "VMs provide isolated environments for applications, enabling efficient resource utilization and scalability."},
                {"question": "Differentiate between full virtualization and para-virtualization.", "answer": "Full virtualization: guest OS unaware of virtualization. Para-virtualization: guest OS aware; improved performance."},
                {"question": "Explain cloud orchestration.", "answer": "Orchestration automates the arrangement, coordination, and management of cloud resources, applications, and services."},
                {"question": "What is cloud elasticity vs cloud scalability?", "answer": "Elasticity: Automatically adjusts resources based on demand. Scalability: Ability to increase capacity manually or automatically to handle growth."},
                {"question": "Explain object storage, block storage, and file storage.", "answer": "Object storage: Stores data as objects with metadata, scalable (e.g., AWS S3). Block storage: Divides storage into fixed-size blocks for databases (e.g., AWS EBS). File storage: Hierarchical files and directories (e.g., AWS EFS)."},
                {"question": "What is cloud backup?", "answer": "Cloud backup is storing copies of data on cloud servers to prevent data loss and ensure disaster recovery."},
                {"question": "Explain data redundancy in cloud.", "answer": "Data redundancy stores multiple copies across locations to ensure availability and durability."},
                {"question": "What is the difference between hot, warm, and cold storage?", "answer": "Hot: Frequently accessed data, low latency. Warm: Infrequently accessed, moderate cost. Cold: Rarely accessed, low cost, higher retrieval time."},
                {"question": "Explain distributed storage in cloud.", "answer": "Data is spread across multiple servers or locations, ensuring fault tolerance and scalability."},
                {"question": "What is a Content Delivery Network (CDN)?", "answer": "CDN delivers content (web pages, videos) via geographically distributed servers to reduce latency."},
                {"question": "Explain data consistency in cloud storage.", "answer": "Data consistency ensures all users see the same data at the same time. Models: strong, eventual, and causal consistency."},
                {"question": "Explain cloud security challenges.", "answer": "Challenges include data breaches, unauthorized access, insecure APIs, insider threats, and compliance requirements."},
                {"question": "What is identity and access management (IAM)?", "answer": "IAM controls user access to resources in the cloud using authentication and authorization policies."},
                {"question": "Explain encryption in cloud computing.", "answer": "Encryption converts data into unreadable format using keys, ensuring confidentiality during storage and transmission."},
                {"question": "What is multi-factor authentication (MFA) and why is it important?", "answer": "MFA requires multiple verification methods (password + OTP) for secure access, reducing unauthorized access."},
                {"question": "Explain compliance in cloud computing.", "answer": "Compliance ensures cloud services meet legal, regulatory, and industry standards, such as GDPR, HIPAA, or PCI-DSS."},
                {"question": "What is a firewall in cloud computing?", "answer": "Firewall monitors and filters network traffic to prevent unauthorized access to cloud resources."},
                {"question": "Explain DDoS mitigation in cloud.", "answer": "DDoS mitigation protects cloud services from Distributed Denial-of-Service attacks by detecting and blocking malicious traffic."},
                {"question": "Name the major cloud providers and their services.", "answer": "AWS: EC2, S3, Lambda, RDS. Microsoft Azure: Virtual Machines, Blob Storage, Functions. Google Cloud Platform: Compute Engine, Cloud Storage, Cloud Functions."},
                {"question": "Explain serverless computing and its benefits.", "answer": "Serverless computing runs code without managing servers. Benefits: no server management, automatic scaling, pay-per-execution."},
                {"question": "What is edge computing and how is it related to cloud?", "answer": "Edge computing processes data closer to the source for low latency, often integrated with cloud for storage and analytics."},
                {"question": "Explain cloud monitoring and its importance.", "answer": "Cloud monitoring tracks performance, availability, and resource utilization to optimize costs, detect issues, and maintain SLA compliance."},
                {"question": "What is DevOps in cloud computing?", "answer": "DevOps combines development and operations practices to enable continuous integration, delivery, and deployment using cloud resources."},
                {"question": "Explain the future trends in cloud computing.", "answer": "Trends include AI/ML integration, serverless computing, edge computing, multi-cloud strategies, hybrid cloud adoption, and IoT-cloud convergence."}
            ]
        },
        "hard": {
            "type": "Descriptive",
            "questions": [
                {"question": "Explain the NIST cloud computing reference architecture and its key components.", "answer": "NIST defines cloud architecture with five key actors: Cloud Consumer, Cloud Provider, Cloud Broker, Cloud Auditor, and Cloud Carrier. It includes service models (SaaS, PaaS, IaaS), deployment models (public, private, hybrid, community), and emphasizes interoperability, security, and resource management."},
                {"question": "Explain the differences between centralized and distributed cloud architectures.", "answer": "Centralized cloud has resources concentrated in data centers; it simplifies management but increases latency. Distributed cloud spreads resources geographically, improving latency, redundancy, and disaster recovery, but adds management complexity."},
                {"question": "Explain the concept of microservices architecture in cloud computing.", "answer": "Microservices architecture divides applications into loosely coupled, independently deployable services. It enhances scalability, fault isolation, and continuous delivery in cloud environments."},
                {"question": "Explain cloud-native architecture and its advantages.", "answer": "Cloud-native architecture leverages microservices, containers, orchestration, and serverless computing to design applications optimized for cloud environments. Advantages: scalability, flexibility, resilience, and faster deployment."},
                {"question": "Explain the difference between vertical and horizontal scaling in cloud computing.", "answer": "Vertical scaling: Increasing resources (CPU, RAM) on a single instance. Horizontal scaling: Adding more instances to handle load. Horizontal scaling is often more cost-effective and fault-tolerant."},
                {"question": "Explain container orchestration in cloud computing.", "answer": "Container orchestration automates deployment, scaling, networking, and management of containers. Tools like Kubernetes manage container lifecycles and resource allocation across clusters."},
                {"question": "What is a multi-tenant architecture, and what are its challenges?", "answer": "Multi-tenant architecture serves multiple users from shared resources. Challenges: data isolation, security, performance fairness, and resource contention."},
                {"question": "Explain the differences between public, private, hybrid, and multi-cloud strategies from a governance perspective.", "answer": "Public cloud: Low governance; provider handles infrastructure. Private cloud: High governance; organization controls security, compliance. Hybrid: Balanced governance; private cloud for sensitive data, public cloud for elasticity. Multi-cloud: Complex governance; coordination across multiple providers."},
                {"question": "Explain cloud elasticity vs cloud scalability with examples.", "answer": "Elasticity: Automatic adjustment based on demand (e.g., auto-scaling EC2 instances). Scalability: Ability to increase capacity manually or automatically to meet long-term growth (e.g., adding more database shards)."},
                {"question": "Explain the concept of serverless microservices orchestration.", "answer": "Serverless microservices orchestration uses event-driven functions to execute workflows without managing servers. Tools like AWS Step Functions coordinate multiple serverless functions for complex applications."},
                {"question": "Explain full virtualization vs para-virtualization with pros and cons.", "answer": "Full virtualization: Guest OS unaware; high isolation but higher overhead. Para-virtualization: Guest OS aware; better performance but requires modified OS."},
                {"question": "Explain nested virtualization and its use cases.", "answer": "Nested virtualization allows running a virtual machine inside another VM. Use cases: testing hypervisors, cloud labs, and running containers in VMs for isolation."},
                {"question": "What is a virtual private cloud (VPC)?", "answer": "VPC is an isolated section of a public cloud where resources can run in a virtual network, with full control over IP addresses, subnets, and security policies."},
                {"question": "Explain resource scheduling and allocation in cloud computing.", "answer": "Cloud providers use scheduling algorithms (first-come-first-serve, priority-based, load-balancing) to allocate CPU, memory, storage, and network efficiently to meet SLAs."},
                {"question": "Explain the difference between overcommitment and thin provisioning.", "answer": "Overcommitment: Allocating more virtual resources than physical ones, assuming not all will be used simultaneously. Thin provisioning: Allocating storage dynamically on-demand to avoid wastage."},
                {"question": "Explain hyperconverged infrastructure (HCI) in cloud computing.", "answer": "HCI combines compute, storage, and networking into a single software-defined system managed centrally. Advantages: simplified management, scalability, and cost reduction."},
                {"question": "Explain live migration of virtual machines.", "answer": "Live migration transfers running VMs from one host to another without downtime, enabling maintenance, load balancing, and fault tolerance."},
                {"question": "Explain container vs VM in terms of isolation and resource efficiency.", "answer": "VM: Strong isolation, includes OS, heavier resource consumption. Container: Lightweight, shares host OS, faster startup, less isolation than VMs."},
                {"question": "Explain cloud bursting in IaaS.", "answer": "Cloud bursting is running primary workloads on a private cloud and offloading excess traffic to a public cloud during peak demand."},
                {"question": "Explain autoscaling policies and strategies.", "answer": "Autoscaling adjusts resources dynamically based on metrics (CPU, memory, requests). Strategies: target tracking, step scaling, scheduled scaling."},
                {"question": "Explain CAP theorem in cloud databases.", "answer": "CAP theorem states a distributed system can guarantee at most two of: Consistency, Availability, and Partition tolerance. Trade-offs depend on application needs."},
                {"question": "Explain eventual consistency in distributed cloud storage.", "answer": "Eventual consistency ensures all nodes eventually have the same data, but reads may temporarily return stale data. Example: Amazon DynamoDB."},
                {"question": "Explain sharding and replication in cloud databases.", "answer": "Sharding: Splitting database into smaller pieces (shards) to distribute load. Replication: Copying data across multiple nodes for fault tolerance and availability."},
                {"question": "Explain cloud-native databases vs traditional databases.", "answer": "Cloud-native databases are built for scalability, multi-tenancy, and distributed deployments. Traditional databases are designed for single-node deployments."},
                {"question": "Explain tiered storage strategies in cloud.", "answer": "Tiered storage stores data in multiple tiers (hot, warm, cold) based on access frequency to optimize cost and performance."},
                {"question": "Explain the role of object storage metadata in cloud.", "answer": "Metadata stores additional information about objects, aiding search, organization, and access control."},
                {"question": "Explain transactional vs analytical workloads in cloud databases.", "answer": "Transactional (OLTP): Frequent small read/write operations, real-time processing. Analytical (OLAP): Batch queries on large datasets for insights and reporting."},
                {"question": "Explain multi-region data deployment in cloud.", "answer": "Multi-region deployment stores and replicates data across multiple geographic locations for disaster recovery, compliance, and low latency."},
                {"question": "Explain zero-trust architecture in cloud security.", "answer": "Zero-trust assumes no implicit trust for users or devices. All access is verified continuously using authentication, authorization, and monitoring."},
                {"question": "Explain homomorphic encryption in cloud computing.", "answer": "Homomorphic encryption allows computations on encrypted data without decryption, preserving privacy and security."},
                {"question": "Explain secure multi-party computation (SMPC).", "answer": "SMPC allows multiple parties to jointly compute a function over their private inputs without revealing them."},
                {"question": "Explain cloud access security broker (CASB) functions.", "answer": "CASB enforces security policies, monitors cloud usage, manages data access, and detects threats across cloud services."},
                {"question": "Explain data sovereignty and regulatory compliance in cloud.", "answer": "Data sovereignty ensures data is stored and processed in accordance with local laws and regulations, such as GDPR or HIPAA."},
                {"question": "Explain the concept of intrusion detection in cloud.", "answer": "Intrusion detection monitors cloud systems for unauthorized access or malicious activity and alerts administrators for mitigation."},
                {"question": "Explain key management systems (KMS) in cloud.", "answer": "KMS securely generates, stores, rotates, and manages encryption keys for data security in cloud environments."},
                {"question": "Explain container security challenges.", "answer": "Challenges include image vulnerabilities, insecure configurations, network exposure, and runtime attacks in containerized cloud applications."},
                {"question": "Explain SDN (Software Defined Networking) in cloud.", "answer": "SDN separates control and data planes in networking, enabling centralized network management, programmability, and dynamic traffic routing."},
                {"question": "Explain NFV (Network Function Virtualization) in cloud.", "answer": "NFV virtualizes network functions (firewalls, routers) on commodity hardware, reducing cost and improving flexibility."},
                {"question": "Explain latency optimization strategies in cloud networking.", "answer": "Techniques: content delivery networks, edge computing, multi-region deployment, and load balancing to reduce response time."},
                {"question": "Explain the role of edge computing in IoT-cloud integration.", "answer": "Edge computing processes IoT data locally to reduce latency and bandwidth, sending only relevant data to the cloud for storage or analytics."},
                {"question": "Explain the difference between cloud WAN and LAN.", "answer": "WAN connects cloud resources over large distances; LAN connects resources within a data center. WAN focuses on wide-area connectivity, LAN on local communication."},
                {"question": "Explain service mesh in cloud-native applications.", "answer": "Service mesh manages microservices communication, providing load balancing, service discovery, encryption, and observability."},
                {"question": "Explain cloud cost optimization strategies.", "answer": "Strategies: right-sizing resources, autoscaling, reserved instances, spot instances, tiered storage, multi-cloud cost comparison."},
                {"question": "Explain SLA (Service Level Agreement) in cloud computing.", "answer": "SLA is a contract defining uptime, performance, support, and penalties for cloud services. It ensures accountability between provider and consumer."},
                {"question": "Explain cloud observability vs monitoring.", "answer": "Monitoring tracks specific metrics, while observability provides deep insights into system behavior through logs, metrics, and traces."},
                {"question": "Explain chaos engineering in cloud.", "answer": "Chaos engineering introduces controlled failures to test system resilience and fault tolerance in cloud applications."},
                {"question": "Explain multi-cloud deployment strategies.", "answer": "Multi-cloud uses multiple providers to reduce vendor lock-in, improve redundancy, and optimize performance across regions."},
                {"question": "Explain AI/ML integration in cloud.", "answer": "Cloud providers offer AI/ML services for analytics, prediction, and automation without managing infrastructure, such as AWS SageMaker, Google AI Platform."},
                {"question": "Explain the concept of FinOps in cloud.", "answer": "FinOps combines finance, engineering, and operations to optimize cloud spending, track usage, and improve cost accountability."},
                {"question": "Explain trends like edge-cloud hybrid and serverless adoption in next-generation cloud computing.", "answer": "Edge-cloud hybrid: Processes data closer to the source while leveraging cloud for analytics and storage. Serverless adoption: Event-driven, scalable execution reduces infrastructure management."}
            ]
        }
    }
}


# API Key Generator
@app.post("/generate-key/")
def generate_api_key(user: str) -> Dict[str, str]:
    """Generates a secure API key for a specified user."""
    key = secrets.token_hex(16)
    api_keys[user] = key
    return {"user": user, "api_key": key}

# Dependency to Verify API Key
def verify_api_key(x_api_key: str = Header(..., alias="X-API-Key")) -> str:
    """Dependency function to check for a valid API key in the header."""
    if x_api_key not in api_keys.values():
        raise HTTPException(status_code=401, detail="Invalid API Key. Please generate a new one via /generate-key/")
    return x_api_key

# Get Questions
@app.get("/get-questions/{domain}/{category}")
def get_questions(domain: str, category: str, api_key: str = Depends(verify_api_key)) -> Dict[str, Any]:
    """Retrieves quiz questions for a specified domain and difficulty category."""
    domain = domain.capitalize()
    category = category.lower()

    if domain not in questions_db or category not in questions_db[domain]:
        raise HTTPException(status_code=404, detail=f"Domain '{domain}' or Category '{category}' not found.")

    data = questions_db[domain][category]

    return {
        "domain": domain,
        "category": category,
        "type": data["type"],
        "total": len(data["questions"]),
        "questions": data["questions"]
    }

# Get Domains Overview
@app.get("/domains/")
def get_domains(api_key: str = Depends(verify_api_key)) -> Dict[str, Dict[str, int]]:
    """Provides an overview of all available domains and the question counts per category."""
    overview = {}
    for domain, categories in questions_db.items():
        overview[domain] = {cat: len(data["questions"]) for cat, data in categories.items()}
    return overview
